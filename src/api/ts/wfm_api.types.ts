/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/customer/session/openSession': {
    /** Open session */
    post: operations['SessionController_openSession'];
  };
  '/customer/session/closeSession': {
    /** Close session */
    post: operations['SessionController_closeSession'];
  };
  '/customer/session/closeSnapshot': {
    /** Close snapshot */
    post: operations['SessionController_closeSnapshot'];
  };
  '/customer/calendar/editCalendarItems': {
    /** Edit calendar items */
    post: operations['CalendarController_editCalendarItems'];
  };
  '/customer/schedule/insertWorkState': {
    /** Insert work state */
    post: operations['ScheduleController_insertWorkState'];
  };
  '/customer/schedule/insertAgentDay': {
    /** Insert agent day */
    post: operations['ScheduleController_insertAgentDay'];
  };
  '/customer/schedule/insertAgentDayUseChunk': {
    /** Insert agent day */
    post: operations['ScheduleController_insertAgentDayUseChunk'];
  };
  '/customer/schedule/insertState': {
    /** Insert state */
    post: operations['ScheduleController_insertState'];
  };
  '/customer/schedule/deleteState': {
    /** Delete state */
    post: operations['ScheduleController_deleteState'];
  };
  '/customer/schedule/getScenarioParams': {
    /** Get scenario params */
    post: operations['ScheduleController_getScenarioParams'];
  };
  '/customer/schedule/setScenarioParams': {
    /** Set scenario params */
    post: operations['ScheduleController_setScenarioParams'];
  };
  '/customer/schedule/findAgentDay': {
    /** Get agent day */
    post: operations['ScheduleController_findAgentDay'];
  };
  '/customer/schedule/getAuditLog': {
    /** Get audit log */
    post: operations['ScheduleController_getAuditLog'];
  };
  '/customer/schedule/rollbackSchedule': {
    /** Rolls back current schedule to specific Schedule Audit Transaction from the past. */
    post: operations['ScheduleController_rollbackSchedule'];
  };
  '/customer/schedule/openScheduleAgentSnapshot': {
    /** Open schedule agent day snapshot */
    post: operations['ScheduleController_openScheduleAgentSnapshot'];
  };
  '/customer/schedule/openAgentDaySnapshot': {
    /** Open agent day snapshot */
    post: operations['ScheduleController_openAgentDaySnapshot'];
  };
  '/customer/schedule/openAgentDaySnapshotAsync': {
    /** Open agent day snapshot async */
    post: operations['ScheduleController_openAgentDaySnapshotAsync'];
  };
  '/customer/schedule/findAgentDayFromSnapshot': {
    /** Find agent day from snapshot */
    post: operations['ScheduleController_findAgentDayFromSnapshot'];
  };
  '/customer/schedule/sortAgentDaySnapshot': {
    /** Sort agent day snapshot */
    post: operations['ScheduleController_sortAgentDaySnapshot'];
  };
  '/customer/schedule/wasAgentDaySnapshotModified': {
    /** Was agent day snapshot modified */
    post: operations['ScheduleController_wasAgentDaySnapshotModified'];
  };
  '/customer/schedule/validateAgentDay': {
    /** Validate agent day */
    post: operations['ScheduleController_validateAgentDay'];
  };
  '/customer/schedule/validateAgentDayUseChunk': {
    /** Validate agent day */
    post: operations['ScheduleController_validateAgentDayUseChunk'];
  };
  '/customer/schedule/saveAgentDayAsync': {
    /** Save agent day async */
    post: operations['ScheduleController_saveAgentDayAsync'];
  };
  '/customer/schedule/saveAgentDay': {
    /** Save agent day */
    post: operations['ScheduleController_saveAgentDay'];
  };
  '/customer/schedule/saveAgentDayUseChunk': {
    /** Save agent day */
    post: operations['ScheduleController_saveAgentDayUseChunk'];
  };
  '/customer/schedule/buildAgentDay': {
    /** Build agent day */
    post: operations['ScheduleController_buildAgentDay'];
  };
  '/customer/schedule/buildAgentDayUseChunk': {
    /** Build agent day */
    post: operations['ScheduleController_buildAgentDayUseChunk'];
  };
  '/customer/schedule/buildAgentDayInSnapshot': {
    /** Build agent day in snapshot */
    post: operations['ScheduleController_buildAgentDayInSnapshot'];
  };
  '/customer/schedule/buildAgentDayInSnapshotUseChunk': {
    /** Build agent day in snapshot */
    post: operations['ScheduleController_buildAgentDayInSnapshotUseChunk'];
  };
  '/customer/schedule/findActivities': {
    /** Find activities */
    post: operations['ScheduleController_findActivities'];
  };
  '/customer/schedule/deleteAgentDay': {
    /** Delete agent day */
    post: operations['ScheduleController_deleteAgentDay'];
  };
  '/customer/schedule/scheduleMeeting': {
    /** Schedule meeting */
    post: operations['ScheduleController_scheduleMeeting'];
  };
  '/customer/schedule/openScenarioSnapshot': {
    /** Open scenario snapshot */
    post: operations['ScheduleController_openScenarioSnapshot'];
  };
  '/customer/schedule/findScenarioFromSnapshot': {
    /** Find scenario from snapshot */
    post: operations['ScheduleController_findScenarioFromSnapshot'];
  };
  '/customer/schedule/getScenario': {
    /** Get scenario */
    post: operations['ScheduleController_getScenario'];
  };
  '/customer/schedule/createScenario': {
    /** Create a new scenario */
    post: operations['ScheduleController_createScenario'];
  };
  '/customer/schedule/deleteScenario': {
    /** Delete scenario by id */
    post: operations['ScheduleController_deleteScenario'];
  };
  '/customer/schedule/sortScenarioSnapshot': {
    /** Delete scenario snapshot by id */
    post: operations['ScheduleController_sortScenarioSnapshot'];
  };
  '/customer/schedule/renameScenario': {
    /** Change name of scenario by scenario id */
    post: operations['ScheduleController_renameScenario'];
  };
  '/customer/schedule/saveScenarioComments': {
    /** Change comments of scenario by scenario id */
    post: operations['ScheduleController_saveScenarioComments'];
  };
  '/customer/performance/findPerformanceData': {
    /** Get performance data */
    post: operations['PerformanceController_findPerformanceData'];
  };
  '/customer/performance/findPerformanceDataFromSnapshot': {
    /** Get performance data from snapshot */
    post: operations['PerformanceController_findPerformanceDataFromSnapshot'];
  };
  '/customer/performance/findPerformanceDataFromSnapshotUseChunk': {
    /** Get performance data from snapshot */
    post: operations['PerformanceController_findPerformanceDataFromSnapshotUseChunk'];
  };
  '/customer/config/findActivitySet': {
    /** Find activity set */
    post: operations['ConfigController_findActivitySet'];
  };
  '/customer/config/findMeetings': {
    /** Find meetings */
    post: operations['ConfigController_findMeetings'];
  };
  '/customer/config/insertMeeting': {
    /** Insert new meeting */
    post: operations['ConfigController_insertMeeting'];
  };
  '/customer/config/validateMeeting': {
    /** Validate meeting */
    post: operations['ConfigController_validateMeeting'];
  };
  '/customer/config/updateMeeting': {
    /** Update meeting */
    post: operations['ConfigController_updateMeeting'];
  };
  '/customer/config/openMeetingSnapshot': {
    /** Open snapshot for finding meetings */
    post: operations['ConfigController_openMeetingSnapshot'];
  };
  '/customer/config/findMeetingsFromSnapshot': {
    /** Find meetings from snapshot */
    post: operations['ConfigController_findMeetingsFromSnapshot'];
  };
  '/customer/config/openContractSnapshot': {
    /** Open contract snapshot */
    post: operations['ConfigController_openContractSnapshot'];
  };
  '/customer/config/findContractFromSnapshot': {
    /** Find contract from snapshot */
    post: operations['ConfigController_findContractFromSnapshot'];
  };
  '/customer/config/insertContract': {
    /** Insert a new contract */
    post: operations['ConfigController_insertContract'];
  };
  '/customer/config/validateContract': {
    /** Validate contract */
    post: operations['ConfigController_validateContract'];
  };
  '/customer/config/updateContract': {
    /** Update contract */
    post: operations['ConfigController_updateContract'];
  };
  '/customer/config/findBUs': {
    /** Find business units */
    post: operations['ConfigController_findBUs'];
  };
  '/customer/config/insertBU': {
    /** Insert new business unit */
    post: operations['ConfigController_insertBU'];
  };
  '/customer/config/validateBU': {
    /** Validate business unit */
    post: operations['ConfigController_validateBU'];
  };
  '/customer/config/updateBU': {
    /** Update business unit */
    post: operations['ConfigController_updateBU'];
  };
  '/customer/config/deleteBU': {
    /** Delete business unit */
    post: operations['ConfigController_deleteBU'];
  };
  '/customer/config/findSites': {
    /** Find sites */
    post: operations['ConfigController_findSites'];
  };
  '/customer/config/insertSite': {
    /** Insert new site */
    post: operations['ConfigController_insertSite'];
  };
  '/customer/config/validateSite': {
    /** Validate site */
    post: operations['ConfigController_validateSite'];
  };
  '/customer/config/updateSite': {
    /** Update site */
    post: operations['ConfigController_updateSite'];
  };
  '/customer/config/deleteSite': {
    /** Delete site */
    post: operations['ConfigController_deleteSite'];
  };
  '/customer/config/findTeams': {
    /** Find teams */
    post: operations['ConfigController_findTeams'];
  };
  '/customer/config/insertTeam': {
    /** Insert new team */
    post: operations['ConfigController_insertTeam'];
  };
  '/customer/config/validateTeam': {
    /** Validate team */
    post: operations['ConfigController_validateTeam'];
  };
  '/customer/config/updateTeam': {
    /** Update team */
    post: operations['ConfigController_updateTeam'];
  };
  '/customer/config/deleteTeam': {
    /** Delete team */
    post: operations['ConfigController_deleteTeam'];
  };
  '/customer/config/openTeamSnapshot': {
    /** Open team snapshot */
    post: operations['ConfigController_openTeamSnapshot'];
  };
  '/customer/config/findTeamsFromSnapshot': {
    /** Find teams from snapshot */
    post: operations['ConfigController_findTeamsFromSnapshot'];
  };
  '/customer/config/findAgents': {
    /** Find agents */
    post: operations['ConfigController_findAgents'];
  };
  '/customer/config/insertAgent': {
    /** Insert new agent */
    post: operations['ConfigController_insertAgent'];
  };
  '/customer/config/insertAgents': {
    /** Insert new agents */
    post: operations['ConfigController_insertAgents'];
  };
  '/customer/config/deleteAgent': {
    /** Delete agent */
    post: operations['ConfigController_deleteAgent'];
  };
  '/customer/config/updateAgent': {
    /** Update agent */
    post: operations['ConfigController_updateAgent'];
  };
  '/customer/config/validateAgent': {
    /** Validate agent */
    post: operations['ConfigController_validateAgent'];
  };
  '/customer/config/openAgentSnapshot': {
    /** Open snapshot for find agents */
    post: operations['ConfigController_openAgentSnapshot'];
  };
  '/customer/config/findAgentFromSnapshot': {
    /** Find agents from snapshot */
    post: operations['ConfigController_findAgentFromSnapshot'];
  };
  '/customer/config/findShifts': {
    post: operations['ConfigController_findShifts'];
  };
  '/customer/config/findMeals': {
    post: operations['ConfigController_findMeals'];
  };
  '/customer/config/findBreaks': {
    post: operations['ConfigController_findBreaks'];
  };
  '/customer/config/findExceptions': {
    post: operations['ConfigController_findExceptions'];
  };
  '/customer/config/findTimeOffs': {
    post: operations['ConfigController_findTimeOffs'];
  };
  '/customer/config/findMarkedTimes': {
    post: operations['ConfigController_findMarkedTimes'];
  };
  '/customer/config/buildTreeWithBuAndSites': {
    /** Get business units with sites */
    post: operations['ConfigController_buildTreeWithBuAndSites'];
  };
  '/customer/config/buildTreeWithTeamByBuAndSiteId': {
    /** Get teams */
    post: operations['ConfigController_buildTreeWithTeamByBuAndSiteId'];
  };
  '/customer/config/buildTreeWithAgents': {
    /** Provide site buId, siteId, teamIDs[] */
    post: operations['ConfigController_buildTreeWithAgents'];
  };
  '/customer/config/searchAgents': {
    /** Search agents */
    post: operations['ConfigController_searchAgents'];
  };
  '/customer/config/buildTreeWithTeams': {
    post: operations['ConfigController_buildTreeWithTeams'];
  };
  '/customer/config/timezone': {
    get: operations['ConfigController_getTimezone'];
  };
  '/customer/config/getTimestampOfObject': {
    /** Get db timestamp for object */
    post: operations['ConfigController_getTimestampOfObject'];
  };
  '/customer/config/openProfileSnapshot': {
    /** Open snapshot for profile */
    post: operations['ConfigController_openProfileSnapshot'];
  };
  '/customer/config/fetchProfileFromSnapshot': {
    /** Fetch profile from snapshot */
    post: operations['ConfigController_fetchProfileFromSnapshot'];
  };
  '/customer/user/info': {
    /** Get user info */
    get: operations['UserController_info'];
  };
  '/customer/user/uuid/{uuid}': {
    /** Get user info */
    get: operations['UserController_uuid'];
  };
  '/customer/user/login': {
    /** User login */
    post: operations['UserController_login'];
  };
  '/customer/user/logout': {
    /** User logout */
    get: operations['UserController_logout'];
  };
  '/customer/builder/createReOptimizationRequest': {
    /** Create re-optimization request */
    post: operations['BuilderController_createReOptimizationRequest'];
  };
  '/customer/builder/closeRequest': {
    /** Close request */
    post: operations['BuilderController_closeRequest'];
  };
  '/customer/builder/cancelRequest': {
    /** Cancel request */
    post: operations['BuilderController_cancelRequest'];
  };
  '/customer/builder/cancelAndSaveRequest': {
    /** Cancel and save request */
    post: operations['BuilderController_cancelAndSaveRequest'];
  };
  '/customer/builder/getRequestResult': {
    /** Get request result */
    post: operations['BuilderController_getRequestResult'];
  };
  '/customer/builder/getRequestProgress': {
    /** Get request progress */
    post: operations['BuilderController_getRequestProgress'];
  };
  '/customer/builder/getRequestStatus': {
    /** Get request status */
    post: operations['BuilderController_getRequestStatus'];
  };
  '/customer/builder/getRequestStatusInfo': {
    /** Get request status info */
    post: operations['BuilderController_getRequestStatusInfo'];
  };
  '/customer/builder/getRequestQueueInfo': {
    /** Get request queue info */
    post: operations['BuilderController_getRequestQueueInfo'];
  };
  '/customer/builder/closeAllRequests': {
    /** Close all requests */
    post: operations['BuilderController_closeAllRequests'];
  };
  '/customer/builder/waitForAllRequests': {
    /** Wait for all requests */
    post: operations['BuilderController_waitForAllRequests'];
  };
  '/customer/health': {
    get: operations['HealthController_check'];
  };
  '/customer/forecast/openScenarioSnapshot': {
    /** Open scenario snapshot */
    post: operations['ForecastController_openScenarioSnapshot'];
  };
  '/customer/forecast/findScenarios': {
    /** Find scenarios */
    post: operations['ForecastController_findScenarios'];
  };
  '/customer/forecast/findScenarioFromSnapshot': {
    /** Find scenario from snapshot */
    post: operations['ForecastController_findScenarioFromSnapshot'];
  };
  '/customer/forecast/sortScenarioSnapshot': {
    /** Sort scenario in snapshot */
    post: operations['ForecastController_sortScenarioSnapshot'];
  };
  '/customer/forecast/findScenarioInSnapshot': {
    /** Find scenario in snapshot */
    post: operations['ForecastController_findScenarioInSnapshot'];
  };
}

export interface components {
  schemas: {
    Object: { [key: string]: unknown };
    OpenSessionDto: {
      userId: number;
      isBuilder?: boolean;
    };
    CloseSessionDto: {
      isBuilder?: boolean;
      sid: string;
    };
    CloseSnapshotDto: {
      snapshotId: string;
    };
    CalendarItem: {
      agentId: number;
      /** @example 2023-01-30 */
      date: string;
      /**
       * @description
       *       CalItemTypes
       *         * CAL_ITEM_AVAILABILITY = 5
       * 		* CAL_ITEM_DAY_OFF = 2
       * 		* CAL_ITEM_FD_EXCEPTION = 0
       * 		* CAL_ITEM_PD_EXCEPTION = 1
       * 		* CAL_ITEM_ROTATING_PATTERN = 7
       * 		* CAL_ITEM_SHIFT = 4
       * 		* CAL_ITEM_TIME_OFF = 3
       * 		* CAL_ITEM_UNKNOWN = -1
       * 		* CAL_ITEM_WORKING_HOURS = 6
       *
       * @enum {number}
       */
      item?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | -1;
      itemId: number;
      itemTypeId?: number;
      /** @example 2023-01-30T04:44:59.999Z */
      startTime: string;
      /** @example 2023-01-30T13:30:00.000Z */
      endTime: string;
      savedStatus?: number;
      paidTime: number;
      fullDay: boolean;
      comment: string;
    };
    EditCalendarItemsDto: {
      /**
       * @description
       *       CalAccessLevels
       *         * ADMIN = 0
       * 		* AGENT = 1
       * @enum {number}
       */
      accessLevel?: 0 | 1;
      timezoneId?: number;
      siteId: number;
      ignoreWarnings: boolean;
      items: components['schemas']['CalendarItem'][];
    };
    SuccessData: {
      success: boolean;
    };
    SchWorkState: {
      agentId: number;
      siteId: number;
      date: string;
      startDateTime: string;
      endDateTime: string;
      timezoneId?: number;
      markedTimeId?: number;
      overOfferId?: number;
      activities?: number[];
      virtualActivities?: number[];
    };
    InsertWorkStateDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      ignoreWarnings?: boolean;
      allOrNothing?: boolean;
      autoCommit?: boolean;
      workStates: components['schemas']['SchWorkState'][];
    };
    ActivityHours: {
      startTime: { [key: string]: unknown };
      duration: number;
    };
    ActivitySkill: {
      id: number;
      minLevel: number;
      maxLevel: number;
    };
    SchActivity: {
      id: number;
      setId: number;
      siteId?: number[];
      name?: string;
      shortName?: string;
      isFullDay?: boolean;
      tradeRule?: number;
      virtualActivityId?: number;
      maxSimultUsers?: number;
      minStaffing?: number;
      minStaffingType?: number;
      openHours?: components['schemas']['ActivityHours'][];
      activitySkills?: components['schemas']['ActivitySkill'][];
      timestamp?: number;
    };
    SchAvailability: {
      startDateTime: { [key: string]: unknown };
      endDateTime: { [key: string]: unknown };
    };
    SchActivitySet: {
      id: number;
      name?: string;
      shortName?: string;
      isFullDay?: boolean;
      tradeRule?: number;
      refId?: number;
      activities: number[];
      availabilities?: components['schemas']['SchAvailability'][];
    };
    SchState: {
      refId?: number;
      /**
       * @description
       *       RefType
       *         * NONE = 0
       * 		* OVERTIME = 1
       * 		* MEETING = 2
       * 		* CALENDAR = 4
       * 		* DETACHED = 5
       * 		* AGENT = 6
       * 		* SET = 7
       *
       * @enum {number}
       */
      refType?: 0 | 1 | 2 | 4 | 5 | 6 | 7;
      id: number;
      /**
       * @description
       *       StateType
       *         * NONE = 0
       * 		* DAY_OFF = 1
       * 		* TIME_OFF = 2
       * 		* EXCEPTION = 3
       * 		* BREAK = 4
       * 		* MEAL = 5
       * 		* ACTIVITY = 6
       * 		* ACTIVITY_SET = 7
       * 		* SHIFT = 8
       * 		* MARKED_TIME = 9
       *
       * @enum {number}
       */
      type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
      name?: string;
      shortName?: string;
      startDateTime?: string;
      endDateTime?: string;
      isPaid?: boolean;
      isFullDay?: boolean;
      paidMinutes?: number;
      memo?: string;
    };
    SchCoverage: {
      activityId: number;
      startMinute: number;
      endMinute: number;
    };
    SchDay: {
      comments?: string;
      uuid?: string;
      /**
       * @description
       *       DayFlag
       *         * SCHEDULED = 0
       * 		* MODIFIED = 1
       * 		* TRADED = 2
       *
       * @enum {number}
       */
      flag?: 0 | 1 | 2;
      date: string;
      startDateTime: string;
      endDateTime: string;
      nextStartDateTime?: string;
      prevEndDateTime?: string;
      overtimeMinutes?: number;
      paidMinutes?: number;
      swordDescribe?: string;
      vacationMinutes?: number;
      workMinutes?: number;
      eligibleForTrade?: boolean;
      /**
       * @description
       *       DayType
       *         * NONE = 0
       * 		* DAY_OFF = 1
       * 		* TIME_OFF = 2
       * 		* EXCEPTION = 3
       * 		* SHIFT = 4
       * 		* SHIFT_EXCEPTION = 5
       *
       * @enum {number}
       */
      type: 0 | 1 | 2 | 3 | 4 | 5;
      id: number;
      activities?: components['schemas']['SchActivity'][];
      activitySets?: components['schemas']['SchActivitySet'][];
      dayState?: components['schemas']['SchState'];
      states?: components['schemas']['SchState'][];
      coverage?: components['schemas']['SchCoverage'][];
      timestamp?: number;
      timezoneId?: number;
    };
    CfgContract: {
      id: number;
      buId: number;
      siteId: number[];
      name: string;
      icon: number;
    };
    SchAgentDay: {
      scheduleId?: number;
      userId?: number;
      agentId: number;
      agentName?: string;
      buId: number;
      buName?: string;
      siteId: number;
      siteName?: string;
      teamId: number;
      teamName?: string;
      startDate?: string;
      endDate?: string;
      timestamp?: number;
      days: components['schemas']['SchDay'][];
      contracts?: components['schemas']['CfgContract'][];
    };
    InsertAgentDayDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      agentDays: components['schemas']['SchAgentDay'][];
      buildAgentDay?: boolean;
      ignoreWarnings?: boolean;
      allOrNothing?: boolean;
      autoCommit?: boolean;
    };
    InsertAgentDayUseChunkDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      agentDays: components['schemas']['SchAgentDay'][];
      buildAgentDay?: boolean;
      ignoreWarnings?: boolean;
      allOrNothing?: boolean;
      autoCommit?: boolean;
    };
    InsertStateDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      ignoreWarnings?: boolean;
      allOrNothing?: boolean;
      autoCommit?: boolean;
      states: components['schemas']['SchState'][];
      timezoneId?: number;
    };
    DeleteStateDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      ignoreWarnings?: boolean;
      allOrNothing?: boolean;
      autoCommit?: boolean;
      states: components['schemas']['SchState'][];
      timezoneId?: number;
    };
    SchScenarioProfile: {
      profileId: number;
      minNumber: number;
      maxNumber: number;
      currNumber: number;
      growPerc: number;
    };
    SchSTeamProfile: {
      teamId: number;
      profileId: number;
    };
    SchScenarioParams: {
      siteId: number;
      isMultiSkill: boolean;
      /**
       * @description
       *       StaffingType
       *         * CALCULATED = 0
       * 		* REQUIRED = 1
       *
       * @enum {number}
       */
      staffingType: 0 | 1;
      isIgnoreConstraint: boolean;
      isShuffleAgents: boolean;
      /**
       * @description
       *       SwapMode
       *         * NONE = 0
       * 		* STRICT = 1
       * 		* LOOSE = 2
       * 		* FREE = 3
       *
       * @enum {number}
       */
      swapMode: 0 | 1 | 2 | 3;
      /**
       * @description
       *       TeamConstraints
       *         * IGNORE = 0
       * 		* USE = 1
       * 		* USE_WITHIN_CONTRACT = 2
       * 		* CARPOOL = 4
       *
       * @enum {number}
       */
      teamConstraints: 0 | 1 | 2 | 4;
      isExcludeGranted: boolean;
      isSynchDaysOff: boolean;
      isSynchStartTime: boolean;
      teamWorkWindow: number;
      isSynchDuration: boolean;
      isSynchBreaks: boolean;
      isSynchMeals: boolean;
      teamSize: number;
      ratio: number;
      isUseSecondaryActivities: boolean;
      profiles: components['schemas']['SchScenarioProfile'][];
      teamProfiles: components['schemas']['SchSTeamProfile'][];
    };
    GetScenarioParamsDto: {
      scheduleId?: number;
      siteIds: number[];
    };
    SetScenarioParamsDto: {
      scheduleId?: number;
      params: components['schemas']['SchScenarioParams'][];
    };
    FindAgentDayDto: {
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
      /** @example 2023-01-30 */
      date?: string;
      timezoneId?: number;
      /**
       * @description
       *       InfoType
       *         * OBJECT_ID = 0
       * 		* OBJECT = 1
       * 		* OBJECT_SHORT = 2
       *
       * @enum {number}
       */
      infoType?: 0 | 1 | 2;
      /**
       * @description
       *       StateLayout
       *         * DAY = 0
       * 		* SEQUENTIAL = 1
       * 		* OVERLAPPED = 2
       *
       * @enum {number}
       */
      stateLayout?: 0 | 1 | 2;
      activities?: number[];
      virtualActivities?: number[];
      stateTypes?: number[];
    };
    SchTransaction: {
      userId: number;
      siteId: number;
      userName: string;
      userFirstName: string;
      userLastName: string;
      /**
       * @description
       *       ActionType
       *         * UNKNOWN = 0
       * 		* SAVE = 1
       * 		* DELETE = 2
       * 		* PUBLISH = 3
       * 		* TRADE = 4
       * 		* ROLLBACK = 5
       *
       * @enum {number}
       */
      action: 0 | 1 | 2 | 3 | 4 | 5;
      rollbackAuditId: number;
      auditId: number;
      timestamp: number;
    };
    SchAuditLog: {
      transactions: components['schemas']['SchTransaction'][];
      schedules: components['schemas']['SchAgentDay'][];
    };
    GetAuditLogDto: {
      siteId: number;
      teamIds?: number | number[];
      agentIds?: number | number[];
      /** @example 2023-01-30 */
      date: string;
    };
    Number: { [key: string]: unknown };
    RollbackScheduleDto: {
      /** @description An ID of Schedule Audit Transaction to which to rollback schedule state */
      auditId: number;
      siteId: number;
      teamIds?: number | number[];
      agentIds?: number | number[];
      /**
       * @description Date of schedule that you are interested in
       * @example 2023-01-30
       */
      date: string;
    };
    CfgSnapshot: {
      snapshotId: string;
      totalCount: number;
      timestamp: number;
    };
    OpenScheduleAgentSnapshotDto: {
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
      /** @example 2023-01-30 */
      date?: string;
      activities?: number[];
      virtualActivities?: number[];
      stateTypes?: number[];
      snapshotId?: string;
      useActivityFilter?: boolean;
    };
    SchSnapshot: {
      snapshotId: string;
      agentDayCount: number;
      agentCount: number;
      timestamp: number;
    };
    OpenAgentDaySnapshotDto: {
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
      /** @example 2023-01-30 */
      date?: string;
      timezoneId?: number;
      activities?: number[];
      virtualActivities?: number[];
      stateTypes?: number[];
      groupMode?: number;
      sortMode?: number;
      ascending?: boolean;
    };
    FindAgentDayFromSnapshotDto: {
      contractId?: number | number[];
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
      /** @example 2023-01-30 */
      date?: string;
      timezoneId?: number;
      /**
       * @description
       *       InfoType
       *         * OBJECT_ID = 0
       * 		* OBJECT = 1
       * 		* OBJECT_SHORT = 2
       *
       * @enum {number}
       */
      infoType?: 0 | 1 | 2;
      activities?: number[];
      virtualActivities?: number[];
      stateTypes?: number[];
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
      autoRefresh?: boolean;
    };
    SortAgentDaySnapshotDto: {
      snapshotId: string;
      groupMode?: number;
      sortMode?: number;
      ascending?: boolean;
      date?: string;
    };
    Boolean: { [key: string]: unknown };
    WasAgentDaySnapshotModifiedDto: {
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
      firstDate?: string;
      lastDate?: string;
    };
    ValidateAgentDayDto: {
      scheduleId?: number;
      agentDays?: components['schemas']['SchAgentDay'][];
    };
    ValidateAgentDayUseChunkDto: {
      scheduleId?: number;
      agentDays?: components['schemas']['SchAgentDay'][];
    };
    SaveAgentDayDto: {
      scheduleId?: number;
      agentDays: components['schemas']['SchAgentDay'][];
      ignoreWarnings?: boolean;
      autoCommit?: boolean;
      checkTimestamp?: boolean;
    };
    SaveAgentDayUseChunkDto: {
      scheduleId?: number;
      agentDays: components['schemas']['SchAgentDay'][];
      ignoreWarnings?: boolean;
      autoCommit?: boolean;
      checkTimestamp?: boolean;
    };
    BuildAgentDayDto: {
      scheduleId?: number;
      agentDays: components['schemas']['SchAgentDay'][];
      timezoneId?: number;
      states?: components['schemas']['SchWorkState'][];
      scheduleShiftItems?: boolean;
    };
    BuildAgentDayDtoUseChunk: {
      scheduleId?: number;
      agentDays: components['schemas']['SchAgentDay'][];
      timezoneId?: number;
      states?: components['schemas']['SchWorkState'][];
      scheduleShiftItems?: boolean;
    };
    BuildAgentDayInSnapshotDto: {
      agentDays: components['schemas']['SchAgentDay'][];
      states?: components['schemas']['SchWorkState'][];
      scheduleShiftItems?: boolean;
      snapshotId: string;
      modifiedAgentDays?: components['schemas']['SchAgentDay'][];
      timezoneId?: number;
    };
    BuildAgentDayInSnapshotUseChunkDto: {
      agentDays: components['schemas']['SchAgentDay'][];
      states?: components['schemas']['SchWorkState'][];
      scheduleShiftItems?: boolean;
      snapshotId: string;
      modifiedAgentDays?: components['schemas']['SchAgentDay'][];
      timezoneId?: number;
    };
    FindActivitiesDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
      scheduleId?: number;
      /** @example 2023-01-30 */
      date?: string;
    };
    GenericFilterDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
    };
    DeleteAgentDayDto: {
      startDateTime: string;
      endDateTime: string;
      agentFilter: components['schemas']['GenericFilterDto'];
    };
    ScheduleMeetingDto: {
      scheduleId?: number;
      meetingId: number;
      startDate: string;
      endDate: string;
      ignoreWarnings?: boolean;
      autoCommit?: boolean;
    };
    SchScenarioSnapshot: {
      snapshotId: string;
      scenarioCount: number;
      timestamp: number;
    };
    OpenScenarioSnapshotDto: {
      /**
       * @description
       *       ScenarioOwnership
       *         * MY = 0
       * 		* OTHERS = 1
       * 		* ALL = 2
       * 		* ALL_SHARED = 3
       *
       * @enum {number}
       */
      ownership?: 0 | 1 | 2 | 3;
      scenarioIds?: number | number[];
      types?: number | number[];
      statuses?: number | number[];
      startDate?: string;
      endDate?: string;
      /**
       * @description
       *       ScenarioSortMode
       *         * NONE = 0
       * 		* NAME = 1
       * 		* OWNER = 2
       * 		* TYPE = 3
       * 		* STATUS = 4
       * 		* CREATE_TIME = 5
       * 		* MODIFY_TIME = 6
       * 		* START_DATE = 7
       * 		* END_DATE = 8
       *
       * @enum {number}
       */
      sortMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
      ascending?: boolean;
    };
    SchScenarioAgent: {
      /**
       * @description
       *       ScenarioAgentType
       *         * ACTUAL = 0
       * 		* VIRTUAL = 1
       * 		* PROFILE = 2
       * 		* ASSIGNED = 3
       *
       * @enum {number}
       */
      type: 0 | 1 | 2 | 3;
      siteId?: number;
      agentId: number;
      profileAgentId?: number;
      profileId?: number;
      quota?: number;
      seniority?: number;
      bid?: number;
      position?: number;
      teamId?: number;
      profileTeamId?: number;
    };
    SchScenarioSite: {
      siteId: number;
      activities: number | number[];
      agents: components['schemas']['SchScenarioAgent'][];
    };
    SchScenarioSiteStatus: {
      siteId: number;
      /**
       * @description
       *       ScenarioSiteStatusType
       *         * UNKNOWN = -1
       * 		* NEW = 0
       * 		* SCHEDULED = 1
       * 		* IMPORTED = 2
       * 		* PUBLISHED = 3
       * 		* SCHEDULED_WITH_PROFILES = 4
       * 		* BIDDING_PENDING = 5
       * 		* BIDDING_OPEN = 6
       * 		* BIDDING_CLOSED = 7
       * 		* PROFILES_ASSIGNED = 8
       *
       * @enum {number}
       */
      status: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | -1;
      publishDateTime: number;
      bidStartDateTime: number;
      bidEndDateTime: number;
      rankingSystem: number;
    };
    SchScenarioUserInfo: {
      email: string;
      firstName: string;
      lastName: string;
      userId: number;
      securityRoleId: number;
      timezoneId: number;
      user: string;
    };
    SchScenario: {
      scheduleId: number;
      forecastId: number;
      startDate: string;
      endDate: string;
      endDateExt: string;
      /**
       * @description
       *       ScenarioType
       *         * PRIVATE = 0
       * 		* SHARED = 1
       * 		* BIDDING = 2
       *
       * @enum {number}
       */
      type: 0 | 1 | 2;
      name: string;
      comments: string;
      createDateTime: string;
      updateDateTime: string;
      userId: number;
      timestamp: number;
      sites: components['schemas']['SchScenarioSite'][];
      siteStatus: components['schemas']['SchScenarioSiteStatus'][];
      userInfo?: components['schemas']['SchScenarioUserInfo'];
    };
    FindScenarioFromSnapshotDto: {
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
    };
    GetScenarioDto: {
      provideUserInfo?: boolean;
      scheduleID: number;
      /**
       * @description
       *       InfoTypeScenario
       *         * OBJECT = 0
       * 		* OBJECT_SHORT = 1
       *
       * @enum {number}
       */
      infoType?: 0 | 1;
    };
    CreateScenarioDto: {
      name: string;
      comments?: string;
      date: string;
      startDate: string;
      endDate: string;
      endDateExt: string;
      /**
       * @description
       *       ScenarioType
       *         * PRIVATE = 0
       * 		* SHARED = 1
       * 		* BIDDING = 2
       *
       * @enum {number}
       */
      type?: 0 | 1 | 2;
      sites: components['schemas']['SchScenarioSite'][];
    };
    DeleteScenarioDto: {
      id: number;
    };
    SortScenarioSnapshotDto: {
      snapshotId?: string;
      /**
       * @description
       *       ScenarioSortMode
       *         * NONE = 0
       * 		* NAME = 1
       * 		* OWNER = 2
       * 		* TYPE = 3
       * 		* STATUS = 4
       * 		* CREATE_TIME = 5
       * 		* MODIFY_TIME = 6
       * 		* START_DATE = 7
       * 		* END_DATE = 8
       *
       * @enum {number}
       */
      sortMode: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
      ascending: boolean;
    };
    RenameScenarioDto: {
      scenarioId: number;
      name: string;
    };
    SaveScenarioCommentsDto: {
      scenarioId: number;
      comments: string;
    };
    PerfData: {
      value: number;
      alert: boolean;
    };
    PerfItemDataAndTotal: {
      item: number;
      start: number;
      current: number;
      end: number;
      granularity: number;
      dataArraySize: number;
      data: components['schemas']['PerfData'][];
      totalValue: number;
    };
    FindPerformanceDto: {
      targetId: number;
      /**
       * @description
       *       Targets
       *         * ACTIVITY = 0
       * 		* MULTI_SITE_ACTIVITY = 1
       * 		* SITE = 2
       * 		* BUSINESS_UNIT = 3
       * 		* ENTERPRISE = 4
       *
       * @enum {number}
       */
      targetType?: 0 | 1 | 2 | 3 | 4;
      /** @example 2023-01-30 */
      startDate: string;
      /** @example 2023-01-30 */
      endDate: string;
      /** @example 2023-01-30 */
      currentDate?: string;
      granularity?: number;
      /**
       * @description
       *       TimeZoneOptions
       *         * OPTION_SERVER_TZ = -1
       * 		* OPTION_TARGET_TZ = 0
       * 		* OPTION_USER_TZ = 1
       * 		* TZ_OPTION_LOCAL_TZ = 2
       *
       * @enum {number}
       */
      timezoneOption?: 0 | 1 | 2 | -1;
      timezoneId?: number;
      scenarioId?: number;
      frcScenarioId?: number;
      /**
       * @description
       *       InfoItems
       *         * ALERTS = 0
       * 		* ACT_IV = 1
       * 		* ACT_AHT = 2
       * 		* ACT_SERVICE_PCT = 3
       * 		* ACT_ABANDONED_IV_PCT = 4
       * 		* ACT_ASA = 5
       * 		* ACT_STAFFING = 6
       * 		* ACT_STAFFING_DIFF = 7
       * 		* ACT_DISTRIBUTED_IV = 8
       * 		* ACT_HANDLED_IV = 9
       * 		* FRC_IV = 10
       * 		* FRC_AHT = 11
       * 		* FRC_CALC_STAFFING = 12
       * 		* FRC_CALC_STAFFING_DIFF = 13
       * 		* FRC_REQ_ASA = 14
       * 		* FRC_REQ_SERVICE_PCT = 15
       * 		* FRC_REQ_STAFFING = 16
       * 		* FRC_REQ_STAFFING_DIFF = 17
       * 		* FRC_REQ_ABANDONED_IV_PCT = 18
       * 		* SCH_ASA = 19
       * 		* SCH_HEADCOUNT = 20
       * 		* SCH_COVERAGE = 21
       * 		* SCH_ABANDONED_IV_PCT = 22
       * 		* SCH_MAX_OCCUPANCY_PCT = 23
       * 		* SCH_SERVICE_PCT = 24
       * 		* SCH_REQ_STAFFING_UNDER = 25
       * 		* SCH_CALC_STAFFING_UNDER = 26
       * 		* SCH_REQ_STAFFING_OVER = 27
       * 		* SCH_CALC_STAFFING_OVER = 28
       * 		* OBJECTIVE_SERVICE_PCT = 29
       * 		* PARAM_PERIOD_SERVICE_TIME = 30
       * 		* OBJECTIVE_ABANDONED_IV_PCT = 31
       * 		* PARAM_PERIOD_TIME_TO_ABANDON = 32
       * 		* OBJECTIVE_ASA = 33
       * 		* OBJECTIVE_MAX_OCCUPANCY_PCT = 34
       * 		* PARAM_IOT_PCT = 35
       * 		* PARAM_OVERHEAD_WORK = 36
       * 		* PARAM_OVERHEAD_NON_WORK = 37
       * 		* FRC_CALC_SERVICE_PCT = 38
       * 		* FRC_CALC_ABANDONED_IV_PCT = 39
       * 		* FRC_CALC_ASA = 40
       * 		* FRC_CALC_MAX_OCCUPANCY_PCT = 41
       * 		* SCH_BUDGET = 42
       * 		* FRC_CALC_BUDGET = 43
       * 		* FRC_REQ_BUDGET = 44
       * 		* PARAM_PERIOD_DAILY_PAID_HOURS = 45
       * 		* PARAM_PERIOD_HOURLY_WAGE = 46
       * 		* PARAM_PERIOD_FIXED_AGENTS = 47
       * 		* PARAM_PERIOD_FIXED_AHT = 48
       * 		* SCH_FTE = 49
       * 		* FRC_CALC_FTE = 50
       * 		* FRC_REQ_FTE = 51
       * 		* SCH_HIRING_PLAN = 52
       * 		* FRC_CALC_HIRING_PLAN = 53
       * 		* FRC_REQ_HIRING_PLAN = 54
       * 		* SCH_MAN_HOURS = 55
       * 		* FRC_CALC_MAN_HOURS = 56
       * 		* FRC_REQ_MAN_HOURS = 57
       * 		* FRC_SIMPLE_AHT = 58
       * 		* ACT_COVERAGE = 59
       * 		* ACT_FTE = 60
       * 		* ACT_MAN_HOURS = 61
       * 		* ACT_ABANDONED_IV = 62
       * 		* FRC_CALC_OVERHEAD_WORK = 63
       * 		* FRC_CALC_OVERHEAD_NON_WORK = 64
       * 		* FRC_REQ_OVERHEAD_WORK = 65
       * 		* FRC_REQ_OVERHEAD_NON_WORK = 66
       * 		* SCH_OVERHEAD_WORK = 67
       * 		* SCH_OVERHEAD_NON_WORK = 68
       * 		* SCH_IV = 69
       * 		* SCH_AHT = 70
       * 		* OBJECTIVE_SERVICE_PCT_EX = 71
       * 		* OBJECTIVE_ABANDONED_IV_PCT_EX = 72
       * 		* OBJECTIVE_ASA_EX = 73
       * 		* OBJECTIVE_MAX_OCCUPANCY_PCT_EX = 74
       * 		* PARAM_OVERHEAD_WORK_EX = 75
       * 		* PARAM_OVERHEAD_NON_WORK_EX = 76
       * 		* FRC_REQ_MAX_OCCUPANCY_PCT = 77
       * 		* ACT_SIMPLE_AHT = 78
       * 		* SCH_BASELINE_COVERAGE = 79
       * 		* FRC_CALC_MSE = 80
       * 		* FRC_REQ_MSE = 81
       * 		* SCH_BASELINE_COVERAGE_FTE = 82
       * 		* FRC_CALC_MSE_FTE = 83
       * 		* FRC_REQ_MSE_FTE = 84
       * 		* ACT_OPTIMAL_AGENTS = 85
       * 		* FRC_SHRINKAGE_PCT = 86
       * 		* FRC_TOTAL_WORKING_SHRINKAGE = 87
       * 		* FRC_TOTAL_NON_WORKING_SHRINKAGE = 88
       * 		* FRC_TOTAL_SHRINKAGE = 89
       * 		* SCH_OVERTIME = 90
       * 		* FRC_OVERTIME = 91
       * 		* SCH_OVERTIME_FTE = 92
       * 		* FRC_OVERTIME_FTE = 93
       * 		* FRC_CALC_QUEUE = 94
       * 		* FRC_REQ_QUEUE = 95
       * 		* FRC_CALC_SERVICE_PCT_DEFERRED = 96
       * 		* FRC_REQ_SERVICE_PCT_DEFERRED = 97
       * 		* SCH_QUEUE = 98
       * 		* SCH_SERVICE_PCT_DEFERRED = 99
       * 		* ACT_QUEUE = 100
       * 		* ACT_SERVICE_PCT_DEFERRED = 101
       * 		* PARAM_PERIOD_SERVICE_TIME_TYPE = 102
       * 		* FRC_CALC_INITIAL_QUEUE = 103
       * 		* FRC_CALC_MSE_MAN_HOURS = 104
       * 		* FRC_REQ_MSE_MAN_HOURS = 105
       * 		* SCH_BASELINE_MAN_HOURS = 106
       * 		* FRC_OVERTIME_MAN_HOURS = 107
       * 		* SCH_OVERTIME_MAN_HOURS = 108
       */
      requestedItems: (
        | 0
        | 1
        | 2
        | 3
        | 4
        | 5
        | 6
        | 7
        | 8
        | 9
        | 10
        | 11
        | 12
        | 13
        | 14
        | 15
        | 16
        | 17
        | 18
        | 19
        | 20
        | 21
        | 22
        | 23
        | 24
        | 25
        | 26
        | 27
        | 28
        | 29
        | 30
        | 31
        | 32
        | 33
        | 34
        | 35
        | 36
        | 37
        | 38
        | 39
        | 40
        | 41
        | 42
        | 43
        | 44
        | 45
        | 46
        | 47
        | 48
        | 49
        | 50
        | 51
        | 52
        | 53
        | 54
        | 55
        | 56
        | 57
        | 58
        | 59
        | 60
        | 61
        | 62
        | 63
        | 64
        | 65
        | 66
        | 67
        | 68
        | 69
        | 70
        | 71
        | 72
        | 73
        | 74
        | 75
        | 76
        | 77
        | 78
        | 79
        | 80
        | 81
        | 82
        | 83
        | 84
        | 85
        | 86
        | 87
        | 88
        | 89
        | 90
        | 91
        | 92
        | 93
        | 94
        | 95
        | 96
        | 97
        | 98
        | 99
        | 100
        | 101
        | 102
        | 103
        | 104
        | 105
        | 106
        | 107
        | 108
      )[];
      /**
       * @description
       *       ActivitySelectionBranch
       *         * SITE_BRANCH = 0
       * 		* VIRTUAL_ACTIVITY_BRANCH = 1
       *
       * @enum {number}
       */
      branch?: 0 | 1;
    };
    FindPerformanceDataFromSnapshotDto: {
      targetId: number;
      /**
       * @description
       *       Targets
       *         * ACTIVITY = 0
       * 		* MULTI_SITE_ACTIVITY = 1
       * 		* SITE = 2
       * 		* BUSINESS_UNIT = 3
       * 		* ENTERPRISE = 4
       *
       * @enum {number}
       */
      targetType?: 0 | 1 | 2 | 3 | 4;
      /** @example 2023-01-30 */
      startDate: string;
      /** @example 2023-01-30 */
      endDate: string;
      granularity?: number;
      /**
       * @description
       *       TimeZoneOptions
       *         * OPTION_SERVER_TZ = -1
       * 		* OPTION_TARGET_TZ = 0
       * 		* OPTION_USER_TZ = 1
       * 		* TZ_OPTION_LOCAL_TZ = 2
       *
       * @enum {number}
       */
      timezoneOption?: 0 | 1 | 2 | -1;
      timezoneId?: number;
      /**
       * @description
       *       InfoItems
       *         * ALERTS = 0
       * 		* ACT_IV = 1
       * 		* ACT_AHT = 2
       * 		* ACT_SERVICE_PCT = 3
       * 		* ACT_ABANDONED_IV_PCT = 4
       * 		* ACT_ASA = 5
       * 		* ACT_STAFFING = 6
       * 		* ACT_STAFFING_DIFF = 7
       * 		* ACT_DISTRIBUTED_IV = 8
       * 		* ACT_HANDLED_IV = 9
       * 		* FRC_IV = 10
       * 		* FRC_AHT = 11
       * 		* FRC_CALC_STAFFING = 12
       * 		* FRC_CALC_STAFFING_DIFF = 13
       * 		* FRC_REQ_ASA = 14
       * 		* FRC_REQ_SERVICE_PCT = 15
       * 		* FRC_REQ_STAFFING = 16
       * 		* FRC_REQ_STAFFING_DIFF = 17
       * 		* FRC_REQ_ABANDONED_IV_PCT = 18
       * 		* SCH_ASA = 19
       * 		* SCH_HEADCOUNT = 20
       * 		* SCH_COVERAGE = 21
       * 		* SCH_ABANDONED_IV_PCT = 22
       * 		* SCH_MAX_OCCUPANCY_PCT = 23
       * 		* SCH_SERVICE_PCT = 24
       * 		* SCH_REQ_STAFFING_UNDER = 25
       * 		* SCH_CALC_STAFFING_UNDER = 26
       * 		* SCH_REQ_STAFFING_OVER = 27
       * 		* SCH_CALC_STAFFING_OVER = 28
       * 		* OBJECTIVE_SERVICE_PCT = 29
       * 		* PARAM_PERIOD_SERVICE_TIME = 30
       * 		* OBJECTIVE_ABANDONED_IV_PCT = 31
       * 		* PARAM_PERIOD_TIME_TO_ABANDON = 32
       * 		* OBJECTIVE_ASA = 33
       * 		* OBJECTIVE_MAX_OCCUPANCY_PCT = 34
       * 		* PARAM_IOT_PCT = 35
       * 		* PARAM_OVERHEAD_WORK = 36
       * 		* PARAM_OVERHEAD_NON_WORK = 37
       * 		* FRC_CALC_SERVICE_PCT = 38
       * 		* FRC_CALC_ABANDONED_IV_PCT = 39
       * 		* FRC_CALC_ASA = 40
       * 		* FRC_CALC_MAX_OCCUPANCY_PCT = 41
       * 		* SCH_BUDGET = 42
       * 		* FRC_CALC_BUDGET = 43
       * 		* FRC_REQ_BUDGET = 44
       * 		* PARAM_PERIOD_DAILY_PAID_HOURS = 45
       * 		* PARAM_PERIOD_HOURLY_WAGE = 46
       * 		* PARAM_PERIOD_FIXED_AGENTS = 47
       * 		* PARAM_PERIOD_FIXED_AHT = 48
       * 		* SCH_FTE = 49
       * 		* FRC_CALC_FTE = 50
       * 		* FRC_REQ_FTE = 51
       * 		* SCH_HIRING_PLAN = 52
       * 		* FRC_CALC_HIRING_PLAN = 53
       * 		* FRC_REQ_HIRING_PLAN = 54
       * 		* SCH_MAN_HOURS = 55
       * 		* FRC_CALC_MAN_HOURS = 56
       * 		* FRC_REQ_MAN_HOURS = 57
       * 		* FRC_SIMPLE_AHT = 58
       * 		* ACT_COVERAGE = 59
       * 		* ACT_FTE = 60
       * 		* ACT_MAN_HOURS = 61
       * 		* ACT_ABANDONED_IV = 62
       * 		* FRC_CALC_OVERHEAD_WORK = 63
       * 		* FRC_CALC_OVERHEAD_NON_WORK = 64
       * 		* FRC_REQ_OVERHEAD_WORK = 65
       * 		* FRC_REQ_OVERHEAD_NON_WORK = 66
       * 		* SCH_OVERHEAD_WORK = 67
       * 		* SCH_OVERHEAD_NON_WORK = 68
       * 		* SCH_IV = 69
       * 		* SCH_AHT = 70
       * 		* OBJECTIVE_SERVICE_PCT_EX = 71
       * 		* OBJECTIVE_ABANDONED_IV_PCT_EX = 72
       * 		* OBJECTIVE_ASA_EX = 73
       * 		* OBJECTIVE_MAX_OCCUPANCY_PCT_EX = 74
       * 		* PARAM_OVERHEAD_WORK_EX = 75
       * 		* PARAM_OVERHEAD_NON_WORK_EX = 76
       * 		* FRC_REQ_MAX_OCCUPANCY_PCT = 77
       * 		* ACT_SIMPLE_AHT = 78
       * 		* SCH_BASELINE_COVERAGE = 79
       * 		* FRC_CALC_MSE = 80
       * 		* FRC_REQ_MSE = 81
       * 		* SCH_BASELINE_COVERAGE_FTE = 82
       * 		* FRC_CALC_MSE_FTE = 83
       * 		* FRC_REQ_MSE_FTE = 84
       * 		* ACT_OPTIMAL_AGENTS = 85
       * 		* FRC_SHRINKAGE_PCT = 86
       * 		* FRC_TOTAL_WORKING_SHRINKAGE = 87
       * 		* FRC_TOTAL_NON_WORKING_SHRINKAGE = 88
       * 		* FRC_TOTAL_SHRINKAGE = 89
       * 		* SCH_OVERTIME = 90
       * 		* FRC_OVERTIME = 91
       * 		* SCH_OVERTIME_FTE = 92
       * 		* FRC_OVERTIME_FTE = 93
       * 		* FRC_CALC_QUEUE = 94
       * 		* FRC_REQ_QUEUE = 95
       * 		* FRC_CALC_SERVICE_PCT_DEFERRED = 96
       * 		* FRC_REQ_SERVICE_PCT_DEFERRED = 97
       * 		* SCH_QUEUE = 98
       * 		* SCH_SERVICE_PCT_DEFERRED = 99
       * 		* ACT_QUEUE = 100
       * 		* ACT_SERVICE_PCT_DEFERRED = 101
       * 		* PARAM_PERIOD_SERVICE_TIME_TYPE = 102
       * 		* FRC_CALC_INITIAL_QUEUE = 103
       * 		* FRC_CALC_MSE_MAN_HOURS = 104
       * 		* FRC_REQ_MSE_MAN_HOURS = 105
       * 		* SCH_BASELINE_MAN_HOURS = 106
       * 		* FRC_OVERTIME_MAN_HOURS = 107
       * 		* SCH_OVERTIME_MAN_HOURS = 108
       */
      requestedItems: (
        | 0
        | 1
        | 2
        | 3
        | 4
        | 5
        | 6
        | 7
        | 8
        | 9
        | 10
        | 11
        | 12
        | 13
        | 14
        | 15
        | 16
        | 17
        | 18
        | 19
        | 20
        | 21
        | 22
        | 23
        | 24
        | 25
        | 26
        | 27
        | 28
        | 29
        | 30
        | 31
        | 32
        | 33
        | 34
        | 35
        | 36
        | 37
        | 38
        | 39
        | 40
        | 41
        | 42
        | 43
        | 44
        | 45
        | 46
        | 47
        | 48
        | 49
        | 50
        | 51
        | 52
        | 53
        | 54
        | 55
        | 56
        | 57
        | 58
        | 59
        | 60
        | 61
        | 62
        | 63
        | 64
        | 65
        | 66
        | 67
        | 68
        | 69
        | 70
        | 71
        | 72
        | 73
        | 74
        | 75
        | 76
        | 77
        | 78
        | 79
        | 80
        | 81
        | 82
        | 83
        | 84
        | 85
        | 86
        | 87
        | 88
        | 89
        | 90
        | 91
        | 92
        | 93
        | 94
        | 95
        | 96
        | 97
        | 98
        | 99
        | 100
        | 101
        | 102
        | 103
        | 104
        | 105
        | 106
        | 107
        | 108
      )[];
      /**
       * @description
       *       ActivitySelectionBranch
       *         * SITE_BRANCH = 0
       * 		* VIRTUAL_ACTIVITY_BRANCH = 1
       *
       * @enum {number}
       */
      branch?: 0 | 1;
      snapshotId: string;
      agentDays?: components['schemas']['SchAgentDay'][];
    };
    FindPerformanceDataFromSnapshotUseChunkDto: {
      targetId: number;
      /**
       * @description
       *       Targets
       *         * ACTIVITY = 0
       * 		* MULTI_SITE_ACTIVITY = 1
       * 		* SITE = 2
       * 		* BUSINESS_UNIT = 3
       * 		* ENTERPRISE = 4
       *
       * @enum {number}
       */
      targetType?: 0 | 1 | 2 | 3 | 4;
      /** @example 2023-01-30 */
      startDate: string;
      /** @example 2023-01-30 */
      endDate: string;
      granularity?: number;
      /**
       * @description
       *       TimeZoneOptions
       *         * OPTION_SERVER_TZ = -1
       * 		* OPTION_TARGET_TZ = 0
       * 		* OPTION_USER_TZ = 1
       * 		* TZ_OPTION_LOCAL_TZ = 2
       *
       * @enum {number}
       */
      timezoneOption?: 0 | 1 | 2 | -1;
      timezoneId?: number;
      /**
       * @description
       *       InfoItems
       *         * ALERTS = 0
       * 		* ACT_IV = 1
       * 		* ACT_AHT = 2
       * 		* ACT_SERVICE_PCT = 3
       * 		* ACT_ABANDONED_IV_PCT = 4
       * 		* ACT_ASA = 5
       * 		* ACT_STAFFING = 6
       * 		* ACT_STAFFING_DIFF = 7
       * 		* ACT_DISTRIBUTED_IV = 8
       * 		* ACT_HANDLED_IV = 9
       * 		* FRC_IV = 10
       * 		* FRC_AHT = 11
       * 		* FRC_CALC_STAFFING = 12
       * 		* FRC_CALC_STAFFING_DIFF = 13
       * 		* FRC_REQ_ASA = 14
       * 		* FRC_REQ_SERVICE_PCT = 15
       * 		* FRC_REQ_STAFFING = 16
       * 		* FRC_REQ_STAFFING_DIFF = 17
       * 		* FRC_REQ_ABANDONED_IV_PCT = 18
       * 		* SCH_ASA = 19
       * 		* SCH_HEADCOUNT = 20
       * 		* SCH_COVERAGE = 21
       * 		* SCH_ABANDONED_IV_PCT = 22
       * 		* SCH_MAX_OCCUPANCY_PCT = 23
       * 		* SCH_SERVICE_PCT = 24
       * 		* SCH_REQ_STAFFING_UNDER = 25
       * 		* SCH_CALC_STAFFING_UNDER = 26
       * 		* SCH_REQ_STAFFING_OVER = 27
       * 		* SCH_CALC_STAFFING_OVER = 28
       * 		* OBJECTIVE_SERVICE_PCT = 29
       * 		* PARAM_PERIOD_SERVICE_TIME = 30
       * 		* OBJECTIVE_ABANDONED_IV_PCT = 31
       * 		* PARAM_PERIOD_TIME_TO_ABANDON = 32
       * 		* OBJECTIVE_ASA = 33
       * 		* OBJECTIVE_MAX_OCCUPANCY_PCT = 34
       * 		* PARAM_IOT_PCT = 35
       * 		* PARAM_OVERHEAD_WORK = 36
       * 		* PARAM_OVERHEAD_NON_WORK = 37
       * 		* FRC_CALC_SERVICE_PCT = 38
       * 		* FRC_CALC_ABANDONED_IV_PCT = 39
       * 		* FRC_CALC_ASA = 40
       * 		* FRC_CALC_MAX_OCCUPANCY_PCT = 41
       * 		* SCH_BUDGET = 42
       * 		* FRC_CALC_BUDGET = 43
       * 		* FRC_REQ_BUDGET = 44
       * 		* PARAM_PERIOD_DAILY_PAID_HOURS = 45
       * 		* PARAM_PERIOD_HOURLY_WAGE = 46
       * 		* PARAM_PERIOD_FIXED_AGENTS = 47
       * 		* PARAM_PERIOD_FIXED_AHT = 48
       * 		* SCH_FTE = 49
       * 		* FRC_CALC_FTE = 50
       * 		* FRC_REQ_FTE = 51
       * 		* SCH_HIRING_PLAN = 52
       * 		* FRC_CALC_HIRING_PLAN = 53
       * 		* FRC_REQ_HIRING_PLAN = 54
       * 		* SCH_MAN_HOURS = 55
       * 		* FRC_CALC_MAN_HOURS = 56
       * 		* FRC_REQ_MAN_HOURS = 57
       * 		* FRC_SIMPLE_AHT = 58
       * 		* ACT_COVERAGE = 59
       * 		* ACT_FTE = 60
       * 		* ACT_MAN_HOURS = 61
       * 		* ACT_ABANDONED_IV = 62
       * 		* FRC_CALC_OVERHEAD_WORK = 63
       * 		* FRC_CALC_OVERHEAD_NON_WORK = 64
       * 		* FRC_REQ_OVERHEAD_WORK = 65
       * 		* FRC_REQ_OVERHEAD_NON_WORK = 66
       * 		* SCH_OVERHEAD_WORK = 67
       * 		* SCH_OVERHEAD_NON_WORK = 68
       * 		* SCH_IV = 69
       * 		* SCH_AHT = 70
       * 		* OBJECTIVE_SERVICE_PCT_EX = 71
       * 		* OBJECTIVE_ABANDONED_IV_PCT_EX = 72
       * 		* OBJECTIVE_ASA_EX = 73
       * 		* OBJECTIVE_MAX_OCCUPANCY_PCT_EX = 74
       * 		* PARAM_OVERHEAD_WORK_EX = 75
       * 		* PARAM_OVERHEAD_NON_WORK_EX = 76
       * 		* FRC_REQ_MAX_OCCUPANCY_PCT = 77
       * 		* ACT_SIMPLE_AHT = 78
       * 		* SCH_BASELINE_COVERAGE = 79
       * 		* FRC_CALC_MSE = 80
       * 		* FRC_REQ_MSE = 81
       * 		* SCH_BASELINE_COVERAGE_FTE = 82
       * 		* FRC_CALC_MSE_FTE = 83
       * 		* FRC_REQ_MSE_FTE = 84
       * 		* ACT_OPTIMAL_AGENTS = 85
       * 		* FRC_SHRINKAGE_PCT = 86
       * 		* FRC_TOTAL_WORKING_SHRINKAGE = 87
       * 		* FRC_TOTAL_NON_WORKING_SHRINKAGE = 88
       * 		* FRC_TOTAL_SHRINKAGE = 89
       * 		* SCH_OVERTIME = 90
       * 		* FRC_OVERTIME = 91
       * 		* SCH_OVERTIME_FTE = 92
       * 		* FRC_OVERTIME_FTE = 93
       * 		* FRC_CALC_QUEUE = 94
       * 		* FRC_REQ_QUEUE = 95
       * 		* FRC_CALC_SERVICE_PCT_DEFERRED = 96
       * 		* FRC_REQ_SERVICE_PCT_DEFERRED = 97
       * 		* SCH_QUEUE = 98
       * 		* SCH_SERVICE_PCT_DEFERRED = 99
       * 		* ACT_QUEUE = 100
       * 		* ACT_SERVICE_PCT_DEFERRED = 101
       * 		* PARAM_PERIOD_SERVICE_TIME_TYPE = 102
       * 		* FRC_CALC_INITIAL_QUEUE = 103
       * 		* FRC_CALC_MSE_MAN_HOURS = 104
       * 		* FRC_REQ_MSE_MAN_HOURS = 105
       * 		* SCH_BASELINE_MAN_HOURS = 106
       * 		* FRC_OVERTIME_MAN_HOURS = 107
       * 		* SCH_OVERTIME_MAN_HOURS = 108
       */
      requestedItems: (
        | 0
        | 1
        | 2
        | 3
        | 4
        | 5
        | 6
        | 7
        | 8
        | 9
        | 10
        | 11
        | 12
        | 13
        | 14
        | 15
        | 16
        | 17
        | 18
        | 19
        | 20
        | 21
        | 22
        | 23
        | 24
        | 25
        | 26
        | 27
        | 28
        | 29
        | 30
        | 31
        | 32
        | 33
        | 34
        | 35
        | 36
        | 37
        | 38
        | 39
        | 40
        | 41
        | 42
        | 43
        | 44
        | 45
        | 46
        | 47
        | 48
        | 49
        | 50
        | 51
        | 52
        | 53
        | 54
        | 55
        | 56
        | 57
        | 58
        | 59
        | 60
        | 61
        | 62
        | 63
        | 64
        | 65
        | 66
        | 67
        | 68
        | 69
        | 70
        | 71
        | 72
        | 73
        | 74
        | 75
        | 76
        | 77
        | 78
        | 79
        | 80
        | 81
        | 82
        | 83
        | 84
        | 85
        | 86
        | 87
        | 88
        | 89
        | 90
        | 91
        | 92
        | 93
        | 94
        | 95
        | 96
        | 97
        | 98
        | 99
        | 100
        | 101
        | 102
        | 103
        | 104
        | 105
        | 106
        | 107
        | 108
      )[];
      /**
       * @description
       *       ActivitySelectionBranch
       *         * SITE_BRANCH = 0
       * 		* VIRTUAL_ACTIVITY_BRANCH = 1
       *
       * @enum {number}
       */
      branch?: 0 | 1;
      snapshotId: string;
      agentDays?: components['schemas']['SchAgentDay'][];
    };
    CfgActivitySet: {
      id: number;
      siteId: number[];
      buId: number;
      name: string;
      shorName: string;
      minDuration?: number;
      maxDuration?: number;
      strict?: boolean;
      activities?: number[];
      timestamp?: number;
    };
    FindActivitySetDto: {
      siteId?: number | number[];
      buId?: number | number[];
      activityId?: number | number[];
      activitySetId: number | number[];
    };
    CfgTime: {
      hours: number;
      minutes: number;
    };
    CfgMeeting: {
      id?: number;
      buId?: number;
      siteId?: number[];
      name?: string;
      exceptionTypeId?: number;
      startDate?: { [key: string]: unknown };
      startTime?: components['schemas']['CfgTime'];
      endDate?: { [key: string]: unknown };
      endTime?: components['schemas']['CfgTime'];
      duration?: number;
      weekDays?: boolean[];
      isUseMinmaxGroup?: boolean;
      isIndividual?: boolean;
      recurrenceType?: number;
      timezoneId?: number;
      maxShortagePerc?: number;
      maxSurplusPerc?: number;
      isUseTotalMinutes?: boolean;
      totalMinutes?: number;
      minGroup?: number;
      maxGroup?: number;
      minAttendeesPerc?: number;
      occurences?: number;
      recurrenceMultiplier?: number;
      minOccurences?: number;
      maxOccurences?: number;
      meetingAgents?: number[];
      timestamp?: number;
    };
    FindMeetingsDto: { [key: string]: unknown };
    CfgValidationMsg: {
      number: number;
      code: string;
      message: string;
      /**
       * @description
       *       ObjectType
       *         * UNKNOWN_OBJECT = 0
       * 		* BU_OBJECT = 1
       * 		* SITE_OBJECT = 2
       * 		* AGENT_OBJECT = 3
       * 		* TEAM_OBJECT = 4
       * 		* CONTRACT_OBJECT = 5
       * 		* PROFILE_OBJECT = 6
       * 		* ACTIVITY_OBJECT = 7
       * 		* ACTIVITY_SET_OBJECT = 8
       * 		* VIRTUAL_ACTIVITY_OBJECT = 9
       * 		* SHIFT_OBJECT = 10
       * 		* MEAL_OBJECT = 11
       * 		* BREAK_OBJECT = 12
       * 		* TASK_SEQUENCE_OBJECT = 13
       * 		* EXCEPTION_TYPE_OBJECT = 14
       * 		* MEETING_OBJECT = 15
       * 		* AGENT_STATE_OBJECT = 16
       * 		* FIXED_STATE_OBJECT = 17
       * 		* STATE_OBJECT = 18
       * 		* STATE_GROUP_OBJECT = 19
       * 		* SKILL_OBJECT = 20
       * 		* SUBSYSTEM_OBJECT = 21
       * 		* USER_OBJECT = 22
       * 		* TIMEZONE_OBJECT = 23
       * 		* ROTATION_OBJECT = 24
       * 		* GLOBAL_SETTINGS_OBJECT = 25
       * 		* ACCRUAL_RULE_OBJECT = 26
       * 		* TIME_OFF_TYPE_OBJECT = 27
       * 		* MARKED_TIME_OBJECT = 28
       * 		* NOTIFY_PARAM_OBJECT = 29
       * 		* COLORS_OBJECT = 30
       * 		* REPORT_TASK_OBJECT = 31
       * 		* REPORT_OBJECT = 32
       * 		* SECURITY_ROLE_OBJECT = 33
       * 		* CARPOOL_OBJECT = 34
       * 		* TIME_OFF_BID_PERIOD_OBJECT = 35
       * 		* OVERTIME_OFFER_OBJECT = 36
       *
       * @enum {number}
       */
      type:
        | 0
        | 1
        | 2
        | 3
        | 4
        | 5
        | 6
        | 7
        | 8
        | 9
        | 10
        | 11
        | 12
        | 13
        | 14
        | 15
        | 16
        | 17
        | 18
        | 19
        | 20
        | 21
        | 22
        | 23
        | 24
        | 25
        | 26
        | 27
        | 28
        | 29
        | 30
        | 31
        | 32
        | 33
        | 34
        | 35
        | 36;
      id: number;
    };
    CfgValidation: {
      success: boolean;
      id?: number;
      warnings: components['schemas']['CfgValidationMsg'][];
    };
    InsertMeetingDto: {
      meeting: components['schemas']['CfgMeeting'];
      ignoreWarnings?: boolean;
    };
    ValidateMeetingDto: {
      meeting: components['schemas']['CfgMeeting'];
    };
    UpdateMeetingDto: {
      meeting: components['schemas']['CfgMeeting'];
      ignoreWarnings?: boolean;
      checkTimestamp?: boolean;
    };
    OpenMeetingSnapshotDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
    };
    FindMeetingsFromSnapshotDto: {
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
    };
    OpenContractSnapshotDto: {
      siteId?: number | number[];
      buId?: number | number[];
      contractId?: number | number[];
      shiftId?: number | number[];
    };
    FindContractFromSnapshotDto: {
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
    };
    InsertContractDto: {
      contract: components['schemas']['CfgContract'];
      ignoreWarnings?: boolean;
    };
    ValidateContractDto: {
      contract: components['schemas']['CfgContract'];
    };
    UpdateContractDto: {
      contract: components['schemas']['CfgContract'];
      ignoreWarnings?: boolean;
      checkTimestamp?: boolean;
    };
    CfgBU: {
      id?: number;
      name?: string;
      timezoneId?: number;
      weekStartDay?: number;
      timeProfile?: string;
      sites?: number[];
      virtualActivities?: number[];
      timestamp?: number;
    };
    FindBusDto: {
      snapshotId?: string;
      siteId?: number | number[];
      buId?: number | number[];
      virtualActivities?: number | number[];
    };
    InsertBuDto: {
      bu: components['schemas']['CfgBU'];
      ignoreWarnings?: boolean;
    };
    ValidateBuDto: {
      bu: components['schemas']['CfgBU'];
    };
    UpdateBuDto: {
      bu: components['schemas']['CfgBU'];
      ignoreWarnings?: boolean;
      checkTimestamp?: boolean;
    };
    DeleteCfgObjectDto: {
      id: number;
      siteId?: number;
      ignoreWarnings?: boolean;
    };
    CfgSite: {
      id?: number;
      buId?: number;
      gswName?: string;
      name?: string;
      timezoneId?: number;
      teamWorkWindow?: number;
      maxSeats?: number;
      timeProfile?: string;
      /**
       * @description
       *       PlanningPeriodType
       *         * NONE = -1
       * 		* MONTH = 0
       * 		* TWO_WEEKS = 2
       * 		* THREE_WEEKS = 3
       * 		* FOUR_WEEKS = 4
       * 		* FIVE_WEEKS = 5
       * 		* SIX_WEEKS = 6
       * @enum {number}
       */
      schPlanningPeriodType?: 0 | 2 | 3 | 4 | 5 | 6 | -1;
      schPlanningPeriodStartDate?: number;
      alarmThreshold?: number;
      unssignAgents?: boolean;
      enableAgentCarpools?: boolean;
      minTimeBetweenDays?: number;
      minTimeBetweenStarts?: number;
      onlyOneLogin?: boolean;
      tradeAutoApprove?: boolean;
      synchDaysOff?: boolean;
      synchStartTime?: boolean;
      synchDuration?: boolean;
      synchBreaks?: boolean;
      synchMeals?: boolean;
      mandatoryPaidBreaks?: boolean;
      suppressBreakWarnings?: boolean;
      timestamp?: number;
    };
    FindSitesDto: {
      snapshotId?: string;
      siteId?: number | number[];
      buId?: number | number[];
    };
    InsertSiteDto: {
      site: components['schemas']['CfgSite'];
      ignoreWarnings?: boolean;
    };
    ValidateSiteDto: {
      site: components['schemas']['CfgSite'];
    };
    UpdateSiteDto: {
      site: components['schemas']['CfgSite'];
      ignoreWarnings?: boolean;
      checkTimestamp?: boolean;
    };
    CfgTeam: {
      id?: number;
      siteId?: number;
      name?: string;
      agents?: number[];
      timestamp?: number;
    };
    FindTeamsDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
    };
    InsertTeamDto: {
      team: components['schemas']['CfgTeam'];
      ignoreWarnings?: boolean;
    };
    ValidateTeamDto: {
      team: components['schemas']['CfgTeam'];
    };
    UpdateTeamDto: {
      team: components['schemas']['CfgTeam'];
      ignoreWarnings?: boolean;
      checkTimestamp?: boolean;
    };
    OpenTeamSnapshotDto: { [key: string]: unknown };
    FindTeamsFromSnapshotDto: {
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
    };
    CfgAgentSkill: {
      id: number;
      level: number;
      /**
       * @description
       *       AgentSkillType
       *         * OFF = 0
       * 		* PRIMARY = 1
       * 		* SECONDARY = 2
       *
       * @enum {number}
       */
      type?: 0 | 1 | 2;
    };
    CfgAgentActivity: {
      id: number;
      /**
       * @description
       *       AgentActivityType
       *         * DISABLED = 0
       * 		* PRIMARY = 1
       * 		* SECONDARY = 2
       * 		* AUTO = 3
       *
       * @enum {number}
       */
      type?: 0 | 1 | 2 | 3;
      effectiveDate: { [key: string]: unknown };
    };
    CfgAgentContract: {
      id: number;
      effectiveDate: { [key: string]: unknown };
    };
    CfgAgentRotation: {
      id: number;
      startWeek: number;
      effectiveDate: { [key: string]: unknown };
    };
    CfgAgentTimeOffBonus: {
      id: number;
      agentId: number;
      timeOffTypeId: number;
      startDate: { [key: string]: unknown };
      endDate: { [key: string]: unknown };
      submitDateTime: { [key: string]: unknown };
      comments: string;
      userId: number;
      bonusHours: number;
    };
    CfgAgent: {
      agentId?: number;
      buId?: number;
      siteId?: number;
      teamId?: number;
      contractId?: number | number[];
      employeeId?: string;
      firstName?: string;
      lastName?: string;
      startDate?: { [key: string]: unknown };
      endDate?: { [key: string]: unknown };
      seniority?: number;
      email?: string;
      carpoolId?: number;
      comments?: string;
      hourlyWage?: number;
      agentSkills?: components['schemas']['CfgAgentSkill'][];
      agentActivities?: components['schemas']['CfgAgentActivity'][];
      activities?: number[];
      agentContracts?: components['schemas']['CfgAgentContract'][];
      agentRotations?: components['schemas']['CfgAgentRotation'][];
      agentTimeOffBonus?: components['schemas']['CfgAgentTimeOffBonus'][];
      timestamp?: number;
      teamName?: string;
    };
    FindAgentsDto: {
      snapshotId?: string;
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
    };
    InsertAgentDto: {
      agent: components['schemas']['CfgAgent'];
      ignoreWarnings?: boolean;
    };
    InsertAgentsDto: {
      agents: components['schemas']['CfgAgent'][];
      ignoreWarnings?: boolean;
    };
    UpdateAgentDto: {
      agent: components['schemas']['CfgAgent'];
      ignoreWarnings?: boolean;
      checkTimestamp?: boolean;
    };
    ValidateAgentDto: {
      agent: components['schemas']['CfgAgent'];
    };
    OpenAgentSnapshotDto: {
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      contractId?: number | number[];
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
      startDate?: string;
      endDate?: string;
      enableSecondarySkills?: boolean;
      useActivityFilter?: boolean;
    };
    FindAgentsFromSnapshotDto: {
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
    };
    CfgContractShift: {
      id: number;
      shiftId: number;
      /**
       * @description
       *       ShiftType
       *         * PRIMARY = 1
       * 		* SECONDARY = 2
       *
       * @enum {number}
       */
      shiftType: 1 | 2;
    };
    SiteInfo: {
      id: number;
      name: string;
    };
    CfgMeal: {
      id: number;
      buId: number;
      siteId: number | number[];
      name: string;
      shortName: string;
      isPaid: boolean;
      duration: number;
      startStep: number;
      siteInfo?: components['schemas']['SiteInfo'][];
      startTime: number;
      endTime: number;
      endDuration: number;
      minDuration: number;
      lengthBeforeMeal: number;
      lengthAfterMeal: number;
    };
    CfgBreak: {
      id: number;
      buId: number;
      siteId: number | number[];
      name: string;
      shortName: string;
      isPaid: boolean;
      duration: number;
      startStep: number;
      siteInfo?: components['schemas']['SiteInfo'][];
      minLengthBefore: number;
      maxLengthBefore: number;
      minLengthAfter: number;
      startOffset: number;
      maxDistance: number;
      anchor: number;
    };
    CfgShift: {
      id: number;
      buId: number;
      siteId: number[];
      name: string;
      minDuration: number;
      maxDuration: number;
      earliestStartTime: number;
      latestEndTime: number;
      latestEndDuration: number;
      latestStartDuration: number;
      earliestEndDuration: number;
      openWeekDays: boolean[];
      shiftTitle: string;
      shiftContracts: components['schemas']['CfgContractShift'][];
      meals: components['schemas']['CfgMeal'][];
      breaks: components['schemas']['CfgBreak'][];
    };
    FindShiftsDto: {
      snapshotId?: string;
      siteId?: number | number[];
      buId?: number | number[];
      contractId?: number | number[];
      shiftId?: number | number[];
      date?: string | string[];
      mealId?: number | number[];
      breakId?: number | number[];
      taskSequenceId?: number | number[];
      provideMeals?: boolean;
      provideBreaks?: boolean;
    };
    FindShiftItemsDto: {
      agentId?: number | number[];
      siteId?: number | number[];
      buId?: number | number[];
      teamId?: number | number[];
      shiftId?: number | number[];
      id?: number | number[];
      type?: number | number[];
      useAgentFilter?: boolean;
    };
    CfgExceptionType: {
      id: number;
      buId: number;
      siteId: number | number[];
      name: string;
      shortName: string;
      isPaid: boolean;
      siteInfo?: components['schemas']['SiteInfo'][];
      isFullDay: boolean;
      color: number;
      fontColor: number;
      isUsedInMeeting: boolean;
      isOnsite: boolean;
      isConvertable2dayOff: boolean;
      isUsedAsVacation: boolean;
      timeOffTypeId: number;
      /**
       * @description
       *       TradeRule
       *         * DELETE = 1
       * 		* DO_NOT_TRADE = 2
       * 		* KEEP_WITH_AGENT = 3
       * 		* KEEP_WITH_SCHEDULE = 4
       *
       * @enum {number}
       */
      tradeRule: 1 | 2 | 3 | 4;
      isAgentInit: boolean;
      startDate: number;
      endDate: number;
      isBreaksDuringException: boolean;
    };
    CfgTimeOff: {
      id: number;
      buId: number;
      siteId: number | number[];
      name: string;
      shortName: string;
      isPaid: boolean;
      siteInfo?: components['schemas']['SiteInfo'][];
      color: number;
      fontColor: number;
      /**
       * @description
       *       TradeRule
       *         * DELETE = 1
       * 		* DO_NOT_TRADE = 2
       * 		* KEEP_WITH_AGENT = 3
       * 		* KEEP_WITH_SCHEDULE = 4
       *
       * @enum {number}
       */
      tradeRule: 1 | 2 | 3 | 4;
      isHasLimit: boolean;
    };
    CfgMarkedTime: {
      id: number;
      buId: number;
      siteId: number | number[];
      name: string;
      shortName: string;
      isPaid: boolean;
      siteInfo?: components['schemas']['SiteInfo'][];
      color: number;
      fontColor: number;
      /**
       * @description
       *       MarkedTimeType
       *         * NONE = 0
       * 		* OVERTIME = 1
       * 		* PAYBACK = 2
       *
       * @enum {number}
       */
      type: 0 | 1 | 2;
    };
    CfgShortBusinessUnits: {
      '${buId}': {
        name?: string;
        buId?: number;
        '${buId}'?: {
          name?: string;
          buId?: number;
          sites?: {
            '${siteId}'?: {
              name?: string;
              buId?: number;
              siteId?: number;
              teams?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    CfgFullBusinessUnits: {
      '${buId}': {
        name?: string;
        buId?: number;
        sites?: {
          '${siteId}'?: {
            name?: string;
            buId?: number;
            siteId?: number;
            teams?: {
              '${teamId}'?: {
                name?: string;
                buId?: number;
                siteId?: number;
                teamId?: number;
                agents?: {
                  '${agentId}'?: {
                    firstName?: string;
                    lastName?: string;
                    employeeId?: string;
                    buId?: number;
                    siteId?: number;
                    teamId?: number;
                  };
                };
              };
            };
          };
        };
      };
    };
    FilterTeamsDto: {
      sites?: {
        '${siteId}'?: {
          buId?: number;
          siteId?: number;
        };
      };
      snapshotId?: string;
    };
    SearchAgentDto: {
      employeeId?: string | string[];
      firstName?: string;
      lastName?: string;
    };
    CfgTimezone: {
      timezoneId: number;
      gswTimezoneId: number;
      name: string;
      value: number;
      description: string;
    };
    GetTimestampOfObjectDto: {
      id: number;
      /**
       * @description
       *       ObjectType
       *         * UNKNOWN_OBJECT = 0
       * 		* BU_OBJECT = 1
       * 		* SITE_OBJECT = 2
       * 		* AGENT_OBJECT = 3
       * 		* TEAM_OBJECT = 4
       * 		* CONTRACT_OBJECT = 5
       * 		* PROFILE_OBJECT = 6
       * 		* ACTIVITY_OBJECT = 7
       * 		* ACTIVITY_SET_OBJECT = 8
       * 		* VIRTUAL_ACTIVITY_OBJECT = 9
       * 		* SHIFT_OBJECT = 10
       * 		* MEAL_OBJECT = 11
       * 		* BREAK_OBJECT = 12
       * 		* TASK_SEQUENCE_OBJECT = 13
       * 		* EXCEPTION_TYPE_OBJECT = 14
       * 		* MEETING_OBJECT = 15
       * 		* AGENT_STATE_OBJECT = 16
       * 		* FIXED_STATE_OBJECT = 17
       * 		* STATE_OBJECT = 18
       * 		* STATE_GROUP_OBJECT = 19
       * 		* SKILL_OBJECT = 20
       * 		* SUBSYSTEM_OBJECT = 21
       * 		* USER_OBJECT = 22
       * 		* TIMEZONE_OBJECT = 23
       * 		* ROTATION_OBJECT = 24
       * 		* GLOBAL_SETTINGS_OBJECT = 25
       * 		* ACCRUAL_RULE_OBJECT = 26
       * 		* TIME_OFF_TYPE_OBJECT = 27
       * 		* MARKED_TIME_OBJECT = 28
       * 		* NOTIFY_PARAM_OBJECT = 29
       * 		* COLORS_OBJECT = 30
       * 		* REPORT_TASK_OBJECT = 31
       * 		* REPORT_OBJECT = 32
       * 		* SECURITY_ROLE_OBJECT = 33
       * 		* CARPOOL_OBJECT = 34
       * 		* TIME_OFF_BID_PERIOD_OBJECT = 35
       * 		* OVERTIME_OFFER_OBJECT = 36
       *
       * @enum {number}
       */
      type:
        | 0
        | 1
        | 2
        | 3
        | 4
        | 5
        | 6
        | 7
        | 8
        | 9
        | 10
        | 11
        | 12
        | 13
        | 14
        | 15
        | 16
        | 17
        | 18
        | 19
        | 20
        | 21
        | 22
        | 23
        | 24
        | 25
        | 26
        | 27
        | 28
        | 29
        | 30
        | 31
        | 32
        | 33
        | 34
        | 35
        | 36;
      siteId: number;
    };
    ProfileFilter: {
      snapshotId?: string;
      siteId?: number | number[];
      buId?: number | number[];
      contractId?: number | number[];
      profileId?: number | number[];
    };
    ActivityFilter: {
      snapshotId?: string;
      siteId?: number | number[];
      buId?: number | number[];
      activityId?: number | number[];
      virtualActivityId?: number | number[];
      activitySetId?: number | number[];
      type?: number | number[];
    };
    CfgSortMode: {
      sortMode: number;
      ascending: boolean;
    };
    OpenProfileSnapshotDto: {
      profileFilter?: components['schemas']['ProfileFilter'];
      activityFilter?: components['schemas']['ActivityFilter'];
      sortMode?: components['schemas']['CfgSortMode'];
    };
    ProfileSkills: {
      skillId: number;
      skillLevel: number;
    };
    CfgProfile: {
      profileId: number;
      buId: number;
      siteId: number[];
      contractId: number[];
      name: string;
      profileSkills: components['schemas']['ProfileSkills'][];
      profileActivities: number[];
    };
    FetchProfileFromSnapshotDto: {
      snapshotId: string;
      firstIndex?: number;
      lastIndex?: number;
    };
    AuthorityProperty: {
      dbid: number;
    };
    Authority: {
      name: string;
      properties: components['schemas']['AuthorityProperty'][];
    };
    Detail: {
      userType: string;
      securitySubsystemID: number[];
      userID: number;
    };
    Property: {
      accessGroups: string;
      client_id: string;
      divisions: string;
      firstName: string;
      lastName: string;
      notification_id: string;
      scopes: string;
      tenantDBID: number;
    };
    UserInfo: {
      sub: string;
      aud: string;
      user_name: string;
      given_name: string;
      family_name: string;
      dbid: number;
      contact_center_id: string;
      environment_id: string;
      authorities: components['schemas']['Authority'][];
      details: components['schemas']['Detail'][];
      username: string;
      loginName: string;
      cmeUserName: string;
      contactCenterId: string;
      environmentId: string;
      properties: components['schemas']['Property'][];
    };
    UserLogin: {
      jSessionId?: string;
    };
    LoginDto: {
      userName: string;
      password: string;
    };
    BldRequestInfo: {
      requestId: string;
      sid: string;
    };
    SiteReOptimizationParams: {
      siteId: number;
      agents?: number[];
      teams?: number[];
      staffingType: number;
      teamConstraints: number;
      teamWorkWindow: number;
      isMultiSkill: boolean;
      isExcludeGranted: boolean;
      isShuffleAgents: boolean;
      isIgnoreConstraints: boolean;
      isSynchStartTime: boolean;
      isSynchDaysOff: boolean;
      isSynchDuration: boolean;
      isSynchMeals: boolean;
      isSynchBreaks: boolean;
      grantAllPreferences?: boolean;
      useSecondaryActivities: boolean;
    };
    CreateReOptimizationRequestDto: {
      /** @description Schedule scenario id */
      scheduleId?: number;
      /** @description The list of re-optimization parameters for each site */
      params: components['schemas']['SiteReOptimizationParams'][];
      /** @description Activity ids that should be considered for re-optimization */
      activities?: number[];
      /**
       * @description
       *       ReOptimizationType
       *         * BREAKS = 1
       * 		* BREAKS_MEALS = 2
       * 		* ACTIVITIES = 3
       * 		* BREAKS_MEALS_ACTIVITIES = 4
       * 		* SHIFTS = 5
       *
       * @enum {number}
       */
      reOptimizationType: 1 | 2 | 3 | 4 | 5;
      timezoneId?: number;
      startDate?: string;
      endDate?: string;
      dates: string[];
      startMinute: number;
      isModified: boolean;
      isFixShiftStart: boolean;
      isFixShiftEnd: boolean;
      isFixShiftPaidDuration: boolean;
      useCurrentAgentDayActivities: boolean;
      saveToCommitted: boolean;
    };
    CancelRequestDto: {
      requestId: string;
      sid: string;
    };
    CancelAndSaveRequestDto: {
      requestId: string;
      sid: string;
    };
    GetRequestResultDto: {
      requestId: string;
      sid: string;
    };
    GetRequestProgressDto: {
      requestId: string;
      sid: string;
    };
    BldRequestStatus: {
      progress: number;
      status: string;
    };
    GetRequestStatusDto: {
      requestId: string;
      sid: string;
    };
    BldRequestStatusInfo: {
      agentCount: number;
      buildIteration: number;
      dayCount: number;
      errorCount: number;
      errorMessage: string;
      executionTime: number;
      maxAgentCount: number;
      maxEstimatedAgentCount: number;
      minAgentCount: number;
      minEstimatedAgentCount: number;
      percentageDone: number;
      siteCount: number;
      stage: number;
      stageName: string;
      timeInQueue: number;
      warningCount: number;
    };
    GetRequestStatusInfoDto: {
      requestId: string;
      sid: string;
    };
    BldQueueInfo: {
      buildPendingCount: number;
      currentRequestInfo: components['schemas']['BldRequestStatusInfo'];
      finishedCount: number;
      writePendingCount: number;
    };
    FrcScenarioSnapshot: {
      id: string;
      totalScenarioCount: number;
      timestamp: number;
    };
    FrcActivity: {
      id: number;
      buId: number;
      siteId: number;
    };
    FrcScenarioInformation: {
      id?: number;
      name?: string;
      comments?: string;
      user?: string;
      startDate?: string;
      endDate?: string;
      /**
       * @description
       *       ScenarioTypes
       *         * PRIVATE = 0
       * 		* SHARED = 1
       *
       * @enum {number}
       */
      type?: 0 | 1;
      /**
       * @description
       *       ScenarioStatuses
       *         * EMPTY = 0
       * 		* BUILT = 1
       * 		* EXTRACTED = 2
       * 		* PUBLISHED = 3
       *
       * @enum {number}
       */
      status?: 0 | 1 | 2 | 3;
      bOwn?: boolean;
      dateModified?: string;
      dateCreated?: string;
      activities?: components['schemas']['FrcActivity'][];
    };
    FindScenariosDto: {
      scenarioIds?: number | number[];
    };
    FindScenarioInSnapshotDto: {
      snapshotId?: string;
      name?: string;
      startIndex: number;
    };
  };
}

export interface operations {
  /** Open session */
  SessionController_openSession: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenSessionDto'];
      };
    };
  };
  /** Close session */
  SessionController_closeSession: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CloseSessionDto'];
      };
    };
  };
  /** Close snapshot */
  SessionController_closeSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CloseSnapshotDto'];
      };
    };
  };
  /** Edit calendar items */
  CalendarController_editCalendarItems: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditCalendarItemsDto'];
      };
    };
  };
  /** Insert work state */
  ScheduleController_insertWorkState: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertWorkStateDto'];
      };
    };
  };
  /** Insert agent day */
  ScheduleController_insertAgentDay: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertAgentDayDto'];
      };
    };
  };
  /** Insert agent day */
  ScheduleController_insertAgentDayUseChunk: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertAgentDayUseChunkDto'];
      };
    };
  };
  /** Insert state */
  ScheduleController_insertState: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertStateDto'];
      };
    };
  };
  /** Delete state */
  ScheduleController_deleteState: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteStateDto'];
      };
    };
  };
  /** Get scenario params */
  ScheduleController_getScenarioParams: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchScenarioParams'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetScenarioParamsDto'];
      };
    };
  };
  /** Set scenario params */
  ScheduleController_setScenarioParams: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetScenarioParamsDto'];
      };
    };
  };
  /** Get agent day */
  ScheduleController_findAgentDay: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchAgentDay'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindAgentDayDto'];
      };
    };
  };
  /** Get audit log */
  ScheduleController_getAuditLog: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchAuditLog'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAuditLogDto'];
      };
    };
  };
  /** Rolls back current schedule to specific Schedule Audit Transaction from the past. */
  ScheduleController_rollbackSchedule: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Number'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RollbackScheduleDto'];
      };
    };
  };
  /** Open schedule agent day snapshot */
  ScheduleController_openScheduleAgentSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenScheduleAgentSnapshotDto'];
      };
    };
  };
  /** Open agent day snapshot */
  ScheduleController_openAgentDaySnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenAgentDaySnapshotDto'];
      };
    };
  };
  /** Open agent day snapshot async */
  ScheduleController_openAgentDaySnapshotAsync: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenAgentDaySnapshotDto'];
      };
    };
  };
  /** Find agent day from snapshot */
  ScheduleController_findAgentDayFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchAgentDay'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindAgentDayFromSnapshotDto'];
      };
    };
  };
  /** Sort agent day snapshot */
  ScheduleController_sortAgentDaySnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SortAgentDaySnapshotDto'];
      };
    };
  };
  /** Was agent day snapshot modified */
  ScheduleController_wasAgentDaySnapshotModified: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Boolean'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WasAgentDaySnapshotModifiedDto'];
      };
    };
  };
  /** Validate agent day */
  ScheduleController_validateAgentDay: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateAgentDayDto'];
      };
    };
  };
  /** Validate agent day */
  ScheduleController_validateAgentDayUseChunk: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateAgentDayUseChunkDto'];
      };
    };
  };
  /** Save agent day async */
  ScheduleController_saveAgentDayAsync: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveAgentDayDto'];
      };
    };
  };
  /** Save agent day */
  ScheduleController_saveAgentDay: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveAgentDayDto'];
      };
    };
  };
  /** Save agent day */
  ScheduleController_saveAgentDayUseChunk: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveAgentDayUseChunkDto'];
      };
    };
  };
  /** Build agent day */
  ScheduleController_buildAgentDay: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchAgentDay'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BuildAgentDayDto'];
      };
    };
  };
  /** Build agent day */
  ScheduleController_buildAgentDayUseChunk: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchAgentDay'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BuildAgentDayDtoUseChunk'];
      };
    };
  };
  /** Build agent day in snapshot */
  ScheduleController_buildAgentDayInSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchAgentDay'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BuildAgentDayInSnapshotDto'];
      };
    };
  };
  /** Build agent day in snapshot */
  ScheduleController_buildAgentDayInSnapshotUseChunk: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchAgentDay'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BuildAgentDayInSnapshotUseChunkDto'];
      };
    };
  };
  /** Find activities */
  ScheduleController_findActivities: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchActivity'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindActivitiesDto'];
      };
    };
  };
  /** Delete agent day */
  ScheduleController_deleteAgentDay: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteAgentDayDto'];
      };
    };
  };
  /** Schedule meeting */
  ScheduleController_scheduleMeeting: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SuccessData'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ScheduleMeetingDto'];
      };
    };
  };
  /** Open scenario snapshot */
  ScheduleController_openScenarioSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchScenarioSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenScenarioSnapshotDto'];
      };
    };
  };
  /** Find scenario from snapshot */
  ScheduleController_findScenarioFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchScenario'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindScenarioFromSnapshotDto'];
      };
    };
  };
  /** Get scenario */
  ScheduleController_getScenario: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['SchScenario'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetScenarioDto'];
      };
    };
  };
  /** Create a new scenario */
  ScheduleController_createScenario: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Number'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateScenarioDto'];
      };
    };
  };
  /** Delete scenario by id */
  ScheduleController_deleteScenario: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteScenarioDto'];
      };
    };
  };
  /** Delete scenario snapshot by id */
  ScheduleController_sortScenarioSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SortScenarioSnapshotDto'];
      };
    };
  };
  /** Change name of scenario by scenario id */
  ScheduleController_renameScenario: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RenameScenarioDto'];
      };
    };
  };
  /** Change comments of scenario by scenario id */
  ScheduleController_saveScenarioComments: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveScenarioCommentsDto'];
      };
    };
  };
  /** Get performance data */
  PerformanceController_findPerformanceData: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['PerfItemDataAndTotal'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindPerformanceDto'];
      };
    };
  };
  /** Get performance data from snapshot */
  PerformanceController_findPerformanceDataFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['PerfItemDataAndTotal'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindPerformanceDataFromSnapshotDto'];
      };
    };
  };
  /** Get performance data from snapshot */
  PerformanceController_findPerformanceDataFromSnapshotUseChunk: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['PerfItemDataAndTotal'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindPerformanceDataFromSnapshotUseChunkDto'];
      };
    };
  };
  /** Find activity set */
  ConfigController_findActivitySet: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgActivitySet'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindActivitySetDto'];
      };
    };
  };
  /** Find meetings */
  ConfigController_findMeetings: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgMeeting'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindMeetingsDto'];
      };
    };
  };
  /** Insert new meeting */
  ConfigController_insertMeeting: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertMeetingDto'];
      };
    };
  };
  /** Validate meeting */
  ConfigController_validateMeeting: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateMeetingDto'];
      };
    };
  };
  /** Update meeting */
  ConfigController_updateMeeting: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMeetingDto'];
      };
    };
  };
  /** Open snapshot for finding meetings */
  ConfigController_openMeetingSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenMeetingSnapshotDto'];
      };
    };
  };
  /** Find meetings from snapshot */
  ConfigController_findMeetingsFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgMeeting'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindMeetingsFromSnapshotDto'];
      };
    };
  };
  /** Open contract snapshot */
  ConfigController_openContractSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenContractSnapshotDto'];
      };
    };
  };
  /** Find contract from snapshot */
  ConfigController_findContractFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgContract'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindContractFromSnapshotDto'];
      };
    };
  };
  /** Insert a new contract */
  ConfigController_insertContract: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertContractDto'];
      };
    };
  };
  /** Validate contract */
  ConfigController_validateContract: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateContractDto'];
      };
    };
  };
  /** Update contract */
  ConfigController_updateContract: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContractDto'];
      };
    };
  };
  /** Find business units */
  ConfigController_findBUs: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgBU'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindBusDto'];
      };
    };
  };
  /** Insert new business unit */
  ConfigController_insertBU: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertBuDto'];
      };
    };
  };
  /** Validate business unit */
  ConfigController_validateBU: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateBuDto'];
      };
    };
  };
  /** Update business unit */
  ConfigController_updateBU: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBuDto'];
      };
    };
  };
  /** Delete business unit */
  ConfigController_deleteBU: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteCfgObjectDto'];
      };
    };
  };
  /** Find sites */
  ConfigController_findSites: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgSite'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindSitesDto'];
      };
    };
  };
  /** Insert new site */
  ConfigController_insertSite: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertSiteDto'];
      };
    };
  };
  /** Validate site */
  ConfigController_validateSite: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateSiteDto'];
      };
    };
  };
  /** Update site */
  ConfigController_updateSite: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSiteDto'];
      };
    };
  };
  /** Delete site */
  ConfigController_deleteSite: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteCfgObjectDto'];
      };
    };
  };
  /** Find teams */
  ConfigController_findTeams: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgTeam'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindTeamsDto'];
      };
    };
  };
  /** Insert new team */
  ConfigController_insertTeam: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertTeamDto'];
      };
    };
  };
  /** Validate team */
  ConfigController_validateTeam: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateTeamDto'];
      };
    };
  };
  /** Update team */
  ConfigController_updateTeam: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTeamDto'];
      };
    };
  };
  /** Delete team */
  ConfigController_deleteTeam: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteCfgObjectDto'];
      };
    };
  };
  /** Open team snapshot */
  ConfigController_openTeamSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenTeamSnapshotDto'];
      };
    };
  };
  /** Find teams from snapshot */
  ConfigController_findTeamsFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgTeam'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindTeamsFromSnapshotDto'];
      };
    };
  };
  /** Find agents */
  ConfigController_findAgents: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgAgent'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindAgentsDto'];
      };
    };
  };
  /** Insert new agent */
  ConfigController_insertAgent: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertAgentDto'];
      };
    };
  };
  /** Insert new agents */
  ConfigController_insertAgents: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InsertAgentsDto'];
      };
    };
  };
  /** Delete agent */
  ConfigController_deleteAgent: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteCfgObjectDto'];
      };
    };
  };
  /** Update agent */
  ConfigController_updateAgent: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAgentDto'];
      };
    };
  };
  /** Validate agent */
  ConfigController_validateAgent: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgValidation'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateAgentDto'];
      };
    };
  };
  /** Open snapshot for find agents */
  ConfigController_openAgentSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenAgentSnapshotDto'];
      };
    };
  };
  /** Find agents from snapshot */
  ConfigController_findAgentFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgAgent'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindAgentsFromSnapshotDto'];
      };
    };
  };
  ConfigController_findShifts: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgShift'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindShiftsDto'];
      };
    };
  };
  ConfigController_findMeals: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgMeal'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindShiftItemsDto'];
      };
    };
  };
  ConfigController_findBreaks: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgBreak'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindShiftItemsDto'];
      };
    };
  };
  ConfigController_findExceptions: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgExceptionType'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindShiftItemsDto'];
      };
    };
  };
  ConfigController_findTimeOffs: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgTimeOff'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindShiftItemsDto'];
      };
    };
  };
  ConfigController_findMarkedTimes: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgMarkedTime'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindShiftItemsDto'];
      };
    };
  };
  /** Get business units with sites */
  ConfigController_buildTreeWithBuAndSites: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgShortBusinessUnits'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindBusDto'];
      };
    };
  };
  /** Get teams */
  ConfigController_buildTreeWithTeamByBuAndSiteId: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgFullBusinessUnits'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FilterTeamsDto'];
      };
    };
  };
  /** Provide site buId, siteId, teamIDs[] */
  ConfigController_buildTreeWithAgents: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgFullBusinessUnits'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindAgentsDto'];
      };
    };
  };
  /** Search agents */
  ConfigController_searchAgents: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgFullBusinessUnits'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchAgentDto'];
      };
    };
  };
  ConfigController_buildTreeWithTeams: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgFullBusinessUnits'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindTeamsDto'];
      };
    };
  };
  ConfigController_getTimezone: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgTimezone'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
  };
  /** Get db timestamp for object */
  ConfigController_getTimestampOfObject: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Number'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetTimestampOfObjectDto'];
      };
    };
  };
  /** Open snapshot for profile */
  ConfigController_openProfileSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenProfileSnapshotDto'];
      };
    };
  };
  /** Fetch profile from snapshot */
  ConfigController_fetchProfileFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CfgProfile'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FetchProfileFromSnapshotDto'];
      };
    };
  };
  /** Get user info */
  UserController_info: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['UserInfo'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
  };
  /** Get user info */
  UserController_uuid: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['UserInfo'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
  };
  /** User login */
  UserController_login: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['UserLogin'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto'];
      };
    };
  };
  /** User logout */
  UserController_logout: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
  };
  /** Create re-optimization request */
  BuilderController_createReOptimizationRequest: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['BldRequestInfo'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReOptimizationRequestDto'];
      };
    };
  };
  /** Close request */
  BuilderController_closeRequest: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelRequestDto'];
      };
    };
  };
  /** Cancel request */
  BuilderController_cancelRequest: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelRequestDto'];
      };
    };
  };
  /** Cancel and save request */
  BuilderController_cancelAndSaveRequest: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelAndSaveRequestDto'];
      };
    };
  };
  /** Get request result */
  BuilderController_getRequestResult: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Boolean'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetRequestResultDto'];
      };
    };
  };
  /** Get request progress */
  BuilderController_getRequestProgress: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Number'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetRequestProgressDto'];
      };
    };
  };
  /** Get request status */
  BuilderController_getRequestStatus: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['BldRequestStatus'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetRequestStatusDto'];
      };
    };
  };
  /** Get request status info */
  BuilderController_getRequestStatusInfo: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['BldRequestStatusInfo'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetRequestStatusInfoDto'];
      };
    };
  };
  /** Get request queue info */
  BuilderController_getRequestQueueInfo: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['BldQueueInfo'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
  };
  /** Close all requests */
  BuilderController_closeAllRequests: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
  };
  /** Wait for all requests */
  BuilderController_waitForAllRequests: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
  };
  HealthController_check: {
    parameters: object;
    responses: {
      /** The Health Check is successful */
      200: {
        content: {
          'application/json': {
            /** @example ok */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /** @example object */
            error?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            };
          };
        };
      };
      /** The Health Check is not successful */
      503: {
        content: {
          'application/json': {
            /** @example error */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /**
             * @example {
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            error?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   },
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            };
          };
        };
      };
    };
  };
  /** Open scenario snapshot */
  ForecastController_openScenarioSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['FrcScenarioSnapshot'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OpenScenarioSnapshotDto'];
      };
    };
  };
  /** Find scenarios */
  ForecastController_findScenarios: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['FrcScenarioInformation'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindScenariosDto'];
      };
    };
  };
  /** Find scenario from snapshot */
  ForecastController_findScenarioFromSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['FrcScenarioInformation'][];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindScenarioFromSnapshotDto'];
      };
    };
  };
  /** Sort scenario in snapshot */
  ForecastController_sortScenarioSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Object'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SortScenarioSnapshotDto'];
      };
    };
  };
  /** Find scenario in snapshot */
  ForecastController_findScenarioInSnapshot: {
    parameters: object;
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Number'];
            status?: {
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 2 | 1;
            };
          };
        };
      };
      400: {
        content: {
          'application/json': {
            status?: {
              message?: string;
              /**
               * @description
               *       ApiCodes
               *         * SUCCESS = 0
               * 		* ACCEPTED = 1
               * 		* PARTIAL_SUCCESS = 2
               * 		* FAIL = 500
               * 		* RESOURCE_ALREADY_EXISTS = 609
               * 		* GENERAL_CLIENT_ERROR = 651
               * 		* INVALID_PARAMETER = 652
               * 		* RESOURCE_NOT_FOUND = 604
               * 		* UNAUTHORIZED = 601
               * 		* FAIL_BACKEND = 515
               * 		* FORBIDDEN = 603
               * 		* CONFLICT = 409
               * @enum {number}
               */
              code?: 0 | 1 | 2 | 409 | 500 | 515 | 601 | 603 | 604 | 609 | 651 | 652;
              details?: string[];
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindScenarioInSnapshotDto'];
      };
    };
  };
}